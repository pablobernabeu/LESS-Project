Q_L2_competence_friends <- LHQ3_results_raw[1, 274]
Q_L2_competence_friends <- as.character(Q_L2_competence_friends)
LHQ3_results_raw[2, 274:275] <- lapply(LHQ3_results_raw[2, 274:275], function(x) {
x <- as.character(x)
paste(Q_L2_competence_friends, x, sep = "_")
})
LHQ3_results_raw[1, 276] <- "%Friends_who_speak_L4%"
Q_L2_competence_friends <- LHQ3_results_raw[1, 276]
Q_L2_competence_friends <- as.character(Q_L2_competence_friends)
LHQ3_results_raw[2, 276:277] <- lapply(LHQ3_results_raw[2, 276:277], function(x) {
x <- as.character(x)
paste(Q_L2_competence_friends, x, sep = "_")
})
LHQ3_results_raw[1, 278] <- "Identification_with_L1"
Q_L1_cultural_identification <- LHQ3_results_raw[1, 278]
Q_L1_cultural_identification <- as.character(Q_L1_cultural_identification)
LHQ3_results_raw[2, 278:284] <- lapply(LHQ3_results_raw[2, 278:284], function(x) {
x <- as.character(x)
paste(Q_L1_cultural_identification, x, sep = "_")
})
LHQ3_results_raw[1, 285] <- "Identification_with_L2"
Q_L2_cultural_identification <- LHQ3_results_raw[1, 285]
Q_L2_cultural_identification <- as.character(Q_L2_cultural_identification)
LHQ3_results_raw[2, 285:291] <- lapply(LHQ3_results_raw[2, 285:291], function(x) {
x <- as.character(x)
paste(Q_L2_cultural_identification, x, sep = "_")
})
LHQ3_results_raw[1, 292] <- "Identification_with_L3"
Q_L3_cultural_identification <- LHQ3_results_raw[1, 292]
Q_L3_cultural_identification <- as.character(Q_L3_cultural_identification)
LHQ3_results_raw[2, 292:298] <- lapply(LHQ3_results_raw[2, 292:298], function(x) {
x <- as.character(x)
paste(Q_L3_cultural_identification, x, sep = "_")
})
LHQ3_results_raw[1, 299] <- "Identification_with_L4"
Q_L4_cultural_identification <- LHQ3_results_raw[1, 299]
Q_L4_cultural_identification <- as.character(Q_L4_cultural_identification)
LHQ3_results_raw[2, 299:305] <- lapply(LHQ3_results_raw[2, 299:305], function(x) {
x <- as.character(x)
paste(Q_L4_cultural_identification, x, sep = "_")
})
#Organising the data frame so it can be easily analysed, first by making the
#question/condition the header
#Removing the first row which includes the shorthanded questions and Na values
#making the more informative second row a header
LHQ3_results_raw <- LHQ3_results_raw[-1, ]
new_header <- LHQ3_results_raw[1, ]
LHQ3_results_raw <- LHQ3_results_raw[-1, ]
new_header <- as.character(new_header)
names(LHQ3_results_raw) <- new_header
View(LHQ3_results_raw)
logbook_path <- here("Background", "LHQ3", "Norway site, session_logbook.xlsx")
Norway_session_logbook <- read_excel(logbook_path, col_names = TRUE)
#View(Norway_session_logbook)
# Rename columns to match LHQ3_results_raw to ease merging
Norway_session_logbook <- Norway_session_logbook %>%
rename(
Participant_ID = 1,
Participant_number = 2,
Pseudolanguage_version = 3
) %>%
select(Participant_ID, Participant_number, Pseudolanguage_version)
View(Norway_session_logbook)
#merging the two data frames and removing the extra Participant_number column
LHQ3_data_compact <- LHQ3_results_raw %>%
left_join(Norway_session_logbook, by = "Participant_ID") %>%
rename(
Participant_number_original = Participant_number.x,
Participant_number_new = Participant_number.y
) %>%
mutate(
Participant_number = ifelse(is.na(Participant_number_new),
Participant_number_original, Participant_number_new)
) %>%
select(-Participant_number_original, -Participant_number_new)
View(LHQ3_data_compact)
codeswitching_score <- c("Codeswitching_Frequency of mixing with family\r\nmembers",
"Codeswitching_Frequency of mixing with\r\nfriends",
"Codeswitching_Frequency of mixing with\r\nclassmates",
"Codeswitching_Frequency of mixing with\r\nothers")
# Convert the relevant columns to numeric
LHQ3_data_compact <- LHQ3_data_compact %>%
mutate(across(all_of(codeswitching_score), ~ as.numeric(as.character(.)), .names = "num_{col}"))
#Define the new numeric column names
num_codeswitching_score <- paste0("num_", codeswitching_score)
# Calculate the Codeswitching average ignoring NA values
LHQ3_data_compact <- LHQ3_data_compact %>%
rowwise() %>%
mutate(Codeswitching_average = mean(c_across(all_of(num_codeswitching_score)), na.rm = TRUE)) %>%
ungroup()
file_path2 <- here("Background", "LHQ3", "LHQ3 Aggregate Scores.xlsx")
LHQ3_processed <- read_excel(file_path2, sheet = "Sheet1", col_names = FALSE)
LHQ3_processed <- LHQ3_processed [-1, ]
LHQ3_processed <- LHQ3_processed %>%
row_to_names(row_number = 1)
LHQ3_processed <- LHQ3_processed %>%
rename(Participant_ID = 1, L1_Proficiency_Score = 6, L2_Proficiency_Score = 7,
Multilingual_Language_Diversity_Score = 22 )
# Selecting the necessary columns from LHQ3_data_compact and LHQ3_processed
# combining the two data frames based on Participant_ID, and finally removing
# participant_ID, since the session data use the Participant_number
LHQ3_data_compact_selected <- LHQ3_data_compact %>%
select(Participant_ID, Participant_number, Pseudolanguage_version,
Codeswitching_average)
LHQ3_processed_selected <- LHQ3_processed %>%
select(Participant_ID, L1_Proficiency_Score, L2_Proficiency_Score,
Multilingual_Language_Diversity_Score)
LHQ3_final <- LHQ3_data_compact_selected %>%
left_join(LHQ3_processed_selected, by = "Participant_ID")
LHQ3_final <- subset(LHQ3_final, select = -Participant_ID)
# View the final data frame
View(LHQ3_final)
library(plyr)
library(reshape2)
library(magrittr)
library(dplyr)
library(ggplot2)
Session2path <- "EEG/data/Session 2/Export/"
#creating patterns to import the files and recognise them as distinct conditions
# the final number in the file name indicates the Grammaticality of the trial
#files that end in:
# 101: the trial was grammatical
# 102: the trial presented a violation of interest
# 103: the trial presented an ancillary violation
#Session 2 investigates Gender agreement, indicated by the marker S1
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = Session2path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = Session2path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = Session2path, full.names = TRUE)
# Constructing lists of data, one for each condition
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),
function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),
function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
# converting the lists into data frames
Session2_gram_data = ldply(Session2_gram_list, data.frame)
Session2_violation_interest_data = ldply(Session2_violation_interest_list,
data.frame)
Session2_ancillary_violation_data = ldply (Session2_ancillary_violation_list,
data.frame)
# time during the recording is organised in milliseconds, from -100 to 1098,
#and recorded with 2 ms intervals
seq = seq(-100, 1098, 2)
# the electrode column is formulated as a vector of electrode names that
#correspond to the time interval sequence
names(Session2_gram_data) = c('Electrode', seq)
names(Session2_violation_interest_data) = c('Electrode', seq)
names(Session2_ancillary_violation_data) = c ('Electrode', seq)
# working on the participants' name column
#removing the path from the participants' file names
file_names_gram <- basename(Session2_gram_files)
files_names_violation_interest <- basename(Session2_violation_interest)
files_names_ancillary_violation <- basename(Session2_ancillary_violation)
#Extracting the participant numbers from the file name
participants_gr <- sub("_.*", "", file_names_gram)
participants_violint = sub("_.*", "", files_names_violation_interest)
participants_ancvil = sub("_.*", "", files_names_ancillary_violation)
# adding a "Participant_number" column to the data frames
Session2_gram_data$Participant_number <- rep(participants_gr, each =
nrow(Session2_gram_data) / length(participants_gr))
Session2_violation_interest_data$Participant_number <- rep(participants_violint,
each = nrow(Session2_violation_interest_data) / length(participants_violint))
Session2_ancillary_violation_data$Participant_number <- rep(participants_ancvil,
each = nrow(Session2_ancillary_violation_data) / length(participants_ancvil))
# adding a Grammaticality column to the data frames
Session2_gram_data$Grammaticality <- 'Grammatical'
Session2_violation_interest_data$Grammaticality <- 'Violation of Interest'
Session2_ancillary_violation_data$Grammaticality <- 'Ancillary Violation'
# Combine all data frames into one
Session2_combined_data <- rbind(Session2_gram_data,
Session2_violation_interest_data, Session2_ancillary_violation_data)
#dividing the electrodes into brain regions
# Define the mapping of electrodes to regions
electrode_to_region <- c(
"T7" = "left medial",
"C3" = "left medial",
"CP5" = "left medial",
"T8" = "right medial",
"C4" = "right medial",
"CP6" = "right medial",
"Fp1" = "left anterior",
"F3" = "left anterior",
"F7" = "left anterior",
"FT9" = "left anterior",
"FC5" = "left anterior",
"Fp2" = "right anterior",
"F4" = "right anterior",
"F8" = "right anterior",
"FT10" = "right anterior",
"FC6" = "right anterior",
"P7" = "left posterior",
"P3" = "left posterior",
"O1" = "left posterior",
"P8" = "right posterior",
"P4" = "right posterior",
"O2" = "right posterior",
"Fz" = "midline anterior",
"FC1" = "midline anterior",
"FC2" = "midline anterior",
"Cz" = "midline medial",
"CP1" = "midline medial",
"CP2" = "midline medial",
"Pz" = "midline posterior",
"Oz" = "midline posterior"
)
# Add a Region column on the data frame based on the electrode_to_region mapping
Session2_combined_data <- Session2_combined_data %>%
mutate(Region = electrode_to_region[Electrode])
# Melt the combined data frame to convert it from wide to long format
Session2_melted_data_dirty <- melt(Session2_combined_data, id.vars =
c('Participant_number', 'Electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
# Convert the 'Time' column to numeric
Session2_melted_data_dirty$Time <- as.numeric (as.character
(Session2_melted_data_dirty$Time))
# Add a Session column
Session2_melted_data_dirty$Session <- 'Session 2'
# View the resulting melted data
View(Session2_melted_data_dirty)
# Removing rows where any column has NA or NaN values
Session2_melted_data <- Session2_melted_data_dirty %>%
filter(complete.cases(.))
# View the cleaned data
View(Session2_melted_data)
# making sure that no Nas or NaNs have been introduced by coercion
rows_with_any_na_nan <- Session2_melted_data %>%
filter(if_any(everything(), ~ is.na(.) | is.nan(.)))
print(rows_with_any_na_nan)
#setting the columns Time, Region, Grammaticality and Participant_number as factors
#in order to run ANOVAs
#Session2_melted_data$Time <- as.factor(Session2_melted_data$Time)
Session2_melted_data$Region <- as.factor(Session2_melted_data$Region)
Session2_melted_data$Grammaticality <- as.factor(Session2_melted_data$Grammaticality)
Session2_melted_data$Participant_number <- as.factor(Session2_melted_data$Participant_number)
#adding the LHQ3 data to the Session2_melted_data
#Performing the inner join function,due to the discrepancy between the number of
#rows between the two data frames, so that no data is deleted
Session2_LHQ3 <- full_join(LHQ3_final, Session2_melted_data, by = "Participant_number")
# Print combined data frame
View(Session2_LHQ3)
# Session 2, N200 time window (200-500 ms)
S2_N200 <- Session2_LHQ3 [Session2_LHQ3$Time %in% seq(200, 500, 2),]
View(S2_N200)
Session3path <- "EEG/data/Session 3/Export/"
Session3_GEN_gram_files <- list.files(pattern = "*S1.S101.txt",
path = Session3path, full.names = TRUE)
Session3_GEN_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = Session3path, full.names = TRUE)
Session3_GEN_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = Session3path, full.names = TRUE)
Session3_DOM_gram_files <- list.files(pattern = "*S2.S101.txt",
path = Session3path, full.names = TRUE)
Session3_DOM_violation_interest <- list.files(pattern = "*S2_S102.txt",
path = Session3path, full.names = TRUE)
Session3_DOM_ancillary_violation <- list.files(pattern = "*S2_S103.txt",
path = Session3path, full.names = TRUE)
#Gender
Session3_GEN_gram_list = lapply(1:length(Session3_GEN_gram_files),function(x) {
read.table(Session3_GEN_gram_files[x], header=FALSE) } )
Session3_GEN_violation_interest_list = lapply(1:length(Session3_GEN_violation_interest),
function(x) { read.table(Session3_GEN_violation_interest[x], header=FALSE) } )
Session3_GEN_ancillary_violation_list = lapply(1:length(Session3_GEN_ancillary_violation),
function(x) { read.table(Session3_GEN_ancillary_violation [x], header=FALSE) } )
#Differential object marking
Session3_DOM_gram_list = lapply(1:length(Session3_DOM_gram_files),function(x) {
read.table(Session3_DOM_gram_files[x], header=FALSE) } )
Session3_DOM_violation_interest_list = lapply(1:length(Session3_DOM_violation_interest),
function(x) { read.table(Session3_DOM_violation_interest[x], header=FALSE) } )
Session3_DOM_ancillary_violation_list = lapply(1:length(Session3_DOM_ancillary_violation),
function(x) { read.table(Session3_DOM_ancillary_violation [x], header=FALSE) } )
#Gender
Session3_GEN_gram_data = ldply(Session3_GEN_gram_list, data.frame)
Session3_GEN_violation_interest_data = ldply(Session3_GEN_violation_interest_list,
data.frame)
Session3_GEN_ancillary_violation_data = ldply (Session3_GEN_ancillary_violation_list,
data.frame)
Session3_DOM_gram_data = ldply(Session3_DOM_gram_list, data.frame)
Session3_DOM_violation_interest_data = ldply(Session3_DOM_violation_interest_list,
data.frame)
Session3_DOM_ancillary_violation_data = ldply (Session3_DOM_ancillary_violation_list,
data.frame)
# time during the recording is organised in milliseconds, from -100 to 1098,
#and recorded with 2 ms intervals
seq = seq(-100, 1098, 2)
# the electrode column is formulated as a vector of electrode names that
#correspond to the time interval sequence
names(Session3_GEN_gram_data) = c('Electrode', seq)
names(Session3_GEN_violation_interest_data) = c('Electrode', seq)
names(Session3_GEN_ancillary_violation_data) = c ('Electrode', seq)
names(Session3_DOM_gram_data) = c('Electrode', seq)
names(Session3_DOM_violation_interest_data) = c('Electrode', seq)
names(Session3_DOM_ancillary_violation_data) = c ('Electrode', seq)
# working on the participants' name column
#removing the path from the participants' file names
file_names_S3_GEN_grammatical <- basename(Session3_GEN_gram_files)
files_names_S3_GEN_violation_interest <- basename(Session3_GEN_violation_interest)
files_names_S3_GEN_ancillary_violation <- basename(Session3_GEN_ancillary_violation)
file_names_S3_DOM_grammatical <- basename(Session3_DOM_gram_files)
files_names_S3_DOM_violation_interest <- basename(Session3_DOM_violation_interest)
files_names_S3_DOM_ancillary_violation <- basename(Session3_DOM_ancillary_violation)
#Extracting the participant numbers from the file name
participants_S3_GEN_grammatical <- sub("_.*", "", file_names_S3_GEN_grammatical)
participants_S3_GEN_violint = sub("_.*", "", files_names_S3_GEN_violation_interest)
participants_S3_GEN_ancvil = sub("_.*", "", files_names_S3_GEN_ancillary_violation)
participants_S3_DOM_grammatical <- sub("_.*", "", file_names_S3_DOM_grammatical)
participants_S3_DOM_violint = sub("_.*", "", files_names_S3_DOM_violation_interest)
participants_S3_DOM_ancvil = sub("_.*", "", files_names_S3_DOM_ancillary_violation)
# adding a "Participant_number" column to the data frames
Session3_GEN_gram_data$Participant_number <- rep(participants_S3_GEN_grammatical, each =
nrow(Session3_GEN_gram_data) / length(participants_S3_GEN_grammatical))
Session3_GEN_violation_interest_data$Participant_number <- rep(participants_S3_GEN_violint,
each = nrow(Session3_GEN_violation_interest_data) / length(participants_S3_GEN_violint))
Session3_GEN_ancillary_violation_data$Participant_number <- rep(participants_S3_GEN_ancvil,
each = nrow(Session3_GEN_ancillary_violation_data) / length(participants_S3_GEN_ancvil))
Session3_DOM_gram_data$Participant_number <- rep(participants_S3_DOM_grammatical, each =
nrow(Session3_DOM_gram_data) / length(participants_S3_DOM_grammatical))
Session3_DOM_violation_interest_data$Participant_number <- rep(participants_S3_DOM_violint,
each = nrow(Session3_DOM_violation_interest_data) / length(participants_S3_DOM_violint))
Session3_DOM_ancillary_violation_data$Participant_number <- rep(participants_S3_DOM_ancvil,
each = nrow(Session3_DOM_ancillary_violation_data) / length(participants_S3_DOM_ancvil))
#Adding a Property column to the data frames
Session3_GEN_gram_data$Property <- 'Gender'
Session3_GEN_violation_interest_data$Property <- 'Gender'
Session3_GEN_ancillary_violation_data$Property <- 'Gender'
Session3_DOM_gram_data$Property <- 'Differential Object Marking'
Session3_DOM_violation_interest_data$Property <- 'Differential Object Marking'
Session3_DOM_ancillary_violation_data$Property <- 'Differential Object Marking'
Session3_GEN_gram_data$Grammaticality <- 'Grammatical'
Session3_GEN_violation_interest_data$Grammaticality <- 'Violation of Interest'
Session3_GEN_ancillary_violation_data$Grammaticality <- 'Ancillary Violation'
Session3_DOM_gram_data$Grammaticality <- 'Grammatical'
Session3_DOM_violation_interest_data$Grammaticality <- 'Violation of Interest'
Session3_DOM_ancillary_violation_data$Grammaticality <- 'Ancillary Violation'
# Combine all data frames into one
Session3_combined_data <- rbind(Session3_GEN_gram_data,
Session3_GEN_violation_interest_data,
Session3_GEN_ancillary_violation_data,
Session3_DOM_gram_data,
Session3_DOM_violation_interest_data,
Session3_DOM_ancillary_violation_data)
View(Session3_combined_data)
#dividing the electrodes into brain regions
# Define the mapping of electrodes to regions
electrode_to_region <- c(
"T7" = "left medial",
"C3" = "left medial",
"CP5" = "left medial",
"T8" = "right medial",
"C4" = "right medial",
"CP6" = "right medial",
"Fp1" = "left anterior",
"F3" = "left anterior",
"F7" = "left anterior",
"FT9" = "left anterior",
"FC5" = "left anterior",
"Fp2" = "right anterior",
"F4" = "right anterior",
"F8" = "right anterior",
"FT10" = "right anterior",
"FC6" = "right anterior",
"P7" = "left posterior",
"P3" = "left posterior",
"O1" = "left posterior",
"P8" = "right posterior",
"P4" = "right posterior",
"O2" = "right posterior",
"Fz" = "midline anterior",
"FC1" = "midline anterior",
"FC2" = "midline anterior",
"Cz" = "midline medial",
"CP1" = "midline medial",
"CP2" = "midline medial",
"Pz" = "midline posterior",
"Oz" = "midline posterior"
)
# Add a Region column on the data frame based on the electrode_to_region mapping
Session3_combined_data <- Session3_combined_data %>%
mutate(Region = electrode_to_region[Electrode])
# Melt the combined data frame to convert it from wide to long format
Session3_melted_data_dirty <- melt(Session3_combined_data, id.vars =
c('Participant_number', 'Electrode', 'Grammaticality', 'Region', 'Property'),
variable.name = 'Time', value.name = 'Activation')
# Convert the 'Time' column to numeric
Session3_melted_data_dirty$Time <- as.numeric (as.character
(Session3_melted_data_dirty$Time))
# Add a Session column
Session3_melted_data_dirty$Session <- 'Session 3'
# View the resulting melted data
View(Session3_melted_data_dirty)
# Removing rows where any column has NA or NaN values
Session3_melted_data <- Session3_melted_data_dirty %>%
filter(complete.cases(.))
# View the cleaned data
View(Session3_melted_data)
# making sure that no Nas or NaNs have been introduced by coercion
rows_with_any_na_nan <- Session3_melted_data %>%
filter(if_any(everything(), ~ is.na(.) | is.nan(.)))
print(rows_with_any_na_nan)
#setting the columns Time, Region, Grammaticality and Participant_number as factors
#in order to run ANOVAs
#Session3_melted_data$Time <- as.factor(Session3_melted_data_S1$Time)
Session3_melted_data$Region <- as.factor(Session3_melted_data$Region)
Session3_melted_data$Grammaticality <- as.factor(Session3_melted_data$Grammaticality)
Session3_melted_data$Participant_number <- as.factor(Session3_melted_data$Participant_number)
#adding the LHQ3 data to the Session2_melted_data
#Performing the inner join function,due to the discrepancy between the number of
#rows between the two data frames, so that no data is deleted
Session3_LHQ3 <- full_join(LHQ3_final, Session3_melted_data, by = "Participant_number")
# Print combined data frame
View(Session3_LHQ3)
# View the final data frame
View(LHQ3_final)
read.csv('EEG\data\Session 2\Raw\subject-1')
read.csv('EEG/data/Session 2/Raw/subject-1')
Session4path <- "EEG/data/Session 4/Export/"
Session4_GEN_gram_files <- list.files(pattern = "*S1.S101.txt",
path = Session3path, full.names = TRUE)
Session4_GEN_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = Session3path, full.names = TRUE)
Session4_GEN_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = Session3path, full.names = TRUE)
Session4_DOM_gram_files <- list.files(pattern = "*S2.S101.txt",
path = Session3path, full.names = TRUE)
Session4_DOM_violation_interest <- list.files(pattern = "*S2_S102.txt",
path = Session3path, full.names = TRUE)
Session4_DOM_ancillary_violation <- list.files(pattern = "*S2_S103.txt",
path = Session3path, full.names = TRUE)
Session4_VOA_gram_files <- list.files(pattern = "*S3.S101.txt",
path = Session3path, full.names = TRUE)
Session4_VOA_violation_interest <- list.files(pattern = "*S3_S102.txt",
path = Session3path, full.names = TRUE)
Session4_VOA_ancillary_violation <- list.files(pattern = "*S3_S103.txt",
path = Session3path, full.names = TRUE)
Session4_GEN_gram_list = lapply(1:length(Session3_GEN_gram_files),function(x) {
read.table(Session4_GEN_gram_files[x], header=FALSE) } )
Session4_GEN_violation_interest_list = lapply(1:length(Session4_GEN_violation_interest),
function(x) { read.table(Session4_GEN_violation_interest[x], header=FALSE) } )
Session4_GEN_ancillary_violation_list = lapply(1:length(Session4_GEN_ancillary_violation),
function(x) { read.table(Session4_GEN_ancillary_violation [x], header=FALSE) } )
Session4_DOM_gram_list = lapply(1:length(Session4_DOM_gram_files),function(x) {
read.table(Session3_DOM_gram_files[x], header=FALSE) } )
Session4_DOM_violation_interest_list = lapply(1:length(Session4_DOM_violation_interest),
function(x) { read.table(Session4_DOM_violation_interest[x], header=FALSE) } )
Session4_DOM_ancillary_violation_list = lapply(1:length(Session4_DOM_ancillary_violation),
function(x) { read.table(Session4_DOM_ancillary_violation [x], header=FALSE) } )
Session4_VOA_gram_list = lapply(1:length(Session4_VOA_gram_files),function(x) {
read.table(Session3_VOA_gram_files[x], header=FALSE) } )
Session4_VOA_gram_list = lapply(1:length(Session4_VOA_gram_files),function(x) {
read.table(Session4_VOA_gram_files[x], header=FALSE) } )
Session4_DOM_ancillary_violation_list = lapply(1:length(Session4_DOM_ancillary_violation),
function(x) { read.table(Session4_DOM_ancillary_violation [x], header=FALSE) } )
Session4_VOA_gram_list = lapply(1:length(Session4_VOA_gram_files),function(x) {
read.table(Session4_VOA_gram_files[x], header=FALSE) } )
Session4_DOM_gram_files <- list.files(pattern = "*S2.S101.txt",
path = Session3path, full.names = TRUE)
Session4_DOM_violation_interest <- list.files(pattern = "*S2_S102.txt",
path = Session3path, full.names = TRUE)
Session4_DOM_ancillary_violation <- list.files(pattern = "*S2_S103.txt",
path = Session3path, full.names = TRUE)
Session4_VOA_gram_files <- list.files(pattern = "*S3.S101.txt",
path = Session3path, full.names = TRUE)
Session4_VOA_violation_interest <- list.files(pattern = "*S3_S102.txt",
path = Session3path, full.names = TRUE)
Session4_VOA_ancillary_violation <- list.files(pattern = "*S3_S103.txt",
path = Session3path, full.names = TRUE)
Session4_GEN_gram_list = lapply(1:length(Session3_GEN_gram_files),function(x) {
read.table(Session4_GEN_gram_files[x], header=FALSE) } )
Session4_GEN_violation_interest_list = lapply(1:length(Session4_GEN_violation_interest),
function(x) { read.table(Session4_GEN_violation_interest[x], header=FALSE) } )
Session4_GEN_ancillary_violation_list = lapply(1:length(Session4_GEN_ancillary_violation),
function(x) { read.table(Session4_GEN_ancillary_violation [x], header=FALSE) } )
Session4_DOM_gram_list = lapply(1:length(Session4_DOM_gram_files),function(x) {
read.table(Session3_DOM_gram_files[x], header=FALSE) } )
Session4_DOM_violation_interest_list = lapply(1:length(Session4_DOM_violation_interest),
function(x) { read.table(Session4_DOM_violation_interest[x], header=FALSE) } )
Session4_DOM_ancillary_violation_list = lapply(1:length(Session4_DOM_ancillary_violation),
function(x) { read.table(Session4_DOM_ancillary_violation [x], header=FALSE) } )
Session4_VOA_gram_list = lapply(1:length(Session4_VOA_gram_files),function(x) {
read.table(Session4_VOA_gram_files[x], header=FALSE) } )
Session4_VOA_violation_interest_list = lapply(1:length(Session4_VOA_violation_interest),
function(x) { read.table(Session4_VOA_violation_interest[x], header=FALSE) } )
Session4_DOM_gram_list = lapply(1:length(Session4_DOM_gram_files),function(x) {
read.table(Session4_DOM_gram_files[x], header=FALSE) } )
Session4_DOM_violation_interest_list = lapply(1:length(Session4_DOM_violation_interest),
function(x) { read.table(Session4_DOM_violation_interest[x], header=FALSE) } )
Session4_DOM_ancillary_violation_list = lapply(1:length(Session4_DOM_ancillary_violation),
function(x) { read.table(Session4_DOM_ancillary_violation [x], header=FALSE) } )
Session4_VOA_gram_list = lapply(1:length(Session4_VOA_gram_files),function(x) {
read.table(Session4_VOA_gram_files[x], header=FALSE) } )
Session4_GEN_ancillary_violation_list = lapply(1:length(Session4_GEN_ancillary_violation),
function(x) { read.table(Session4_GEN_ancillary_violation [x], header=FALSE) } )
View(Session3_GEN_ancillary_violation_list)
Session4_VOA_gram_list = lapply(1:length(Session4_VOA_gram_files),function(x) {
read.table(Session4_VOA_gram_files[x], header=FALSE) } )
Session4_VOA_violation_interest_list = lapply(1:length(Session4_VOA_violation_interest),
function(x) { read.table(Session4_VOA_violation_interest[x], header=FALSE) } )
Session4_VOA_ancillary_violation_list = lapply(1:length(Session4_VOA_ancillary_violation),
function(x) { read.table(Session4_VOA_ancillary_violation [x], header=FALSE) } )
print(Session4_VOA_gram_files)
Session4_VOA_gram_files <- list.files(pattern = "*S3.S101.txt",
path = Session3path, full.names = TRUE)
Session4_VOA_violation_interest <- list.files(pattern = "*S3_S102.txt",
path = Session3path, full.names = TRUE)
Session4path <- "EEG/data/Session 4/Export/"
Session4_GEN_gram_files <- list.files(pattern = "*S1.S101.txt",
path = Session3path, full.names = TRUE)
