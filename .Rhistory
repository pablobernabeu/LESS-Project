names(Session2_ungram_data) = c('electrode', seq)
Session2_gram_melted = melt(Session2_gram_data, id.vars="electrode")
Session2_gram_melted = Session2_gram_melted %>%
mutate(condition = "Session2_grammatical")
names(Session2_gram_melted) = c('electrode', 'time', 'microvolts','condition')
Session2_ungram_melted = melt(Session2_ungram_data, id.vars="electrode")
Session2_ungram_melted = Session2_ungram_melted %>%
mutate(condition = "Session2_ungrammatical")
names(Session2_ungram_melted) = c('electrode', 'time', 'microvolts','condition')
View(Session2_gram_melted)
participants_gr = sub("_.*", "", Session2_gram_files)
head(participants_gr)
Session2_Gram_fulllist = mapply(function(x,y) rep(x, y), participants_gr, 59)
Session2_Gram_fulllist = unlist(Session2_Gram_fulllist)     # remove all factors, print long list
Session2_Gram_fulllist = rep(Session2_Gram_fulllist, 500)   # correct for individual time point
View(Session2_gram_melted)
participants_ungr = sub("_.*", "", Session2_ungram_files)
head(participants_ungr)
Session2_Ungram_fulllist = mapply(function(x,y) rep(x, y), participants_ungr, 59)
Session2_Ungram_fulllist = unlist(Session2_Ungram_fulllist)     # remove all factors, print long list
Session2_Ungram_fulllist = rep(Session2_Ungram_fulllist, 500)   # correct for individual time point
# Adjust the fulllists to match the number of rows in the melted data frame if necessary
Session2_Gram_fulllist <- Session2_Gram_fulllist[1:nrow(Session2_gram_melted)]
Session2_Ungram_fulllist <- Session2_Ungram_fulllist[1:nrow(Session2_ungram_melted)]
# second, create a column in the melted dataframes saying which participant is at each data point
Session2_gram_melted = Session2_gram_melted %>%
mutate(participants_gr= Session2_Gram_fulllist)
Session2_ungram_melted = Session2_ungram_melted %>%
mutate(participants_ungr = Session2_Ungram_fulllist)
#testing frame
print(Session2_gram_melted)
head(Session2_gram_melted)
print(Session2_ungram_melted)
head(Session2_ungram_melted)
View(Session2_ungram_melted)
str(Session2_gram_files)
Session2_gram_files = as.vector(list.files(pattern = "*S1_S101.txt", path = path, full.names = FALSE) )
str(Session2_gram_files)
Session2_ungram_files = as.vector(list.files(pattern = "*S1_S102.txt", path = path, full.names = FALSE ) )
str(Session2_ungram_files)
# Creating two datalists
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
View(Session2_gram_list)
# Creating two datalists
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
#TEST
library(plyr)
library(reshape2)
library(magrittr)
path <- "EEG/data/Session 2/Export/"
Session2_gram_files = as.vector(list.files(pattern = "*S1_S101.txt", path = path, full.names = FALSE) )
str(Session2_gram_files)
Session2_ungram_files = as.vector(list.files(pattern = "*S1_S102.txt", path = path, full.names = FALSE ) )
str(Session2_ungram_files)
# Creating two datalists
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
View(Session2_gram_list)
#TEST
library(plyr)
library(reshape2)
Session2_gram_files = as.vector(list.files(pattern = "*S1_S101.txt",
path = "EEG/data/Session 2/Export/") )
str(Session2_gram_files)
Session2_ungram_files = as.vector(list.files(pattern = "*S1_S102.txt"))
str(Session2_ungram_files)
# Construct rawdata object (structured as a 'list' of results)
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
# Construct rawdata object (structured as a 'list' of results)
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
View(Session2_gram_list)
install.packages("magrittr")
Y
libray(magrittr)
library(magrittr)
Session2_gram_files = as.vector(list.files(pattern = "*S1_S101.txt",
path = "EEG/data/Session 2/Export/") )
str(Session2_gram_files)
Session2_ungram_files = as.vector(list.files(pattern = "*S1_S102.txt"))
str(Session2_ungram_files)
# Construct rawdata object (structured as a 'list' of results)
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
path <- "EEG/data/Session 2/Export/"
# Get the list of files
Session2_gram_files <- list.files(pattern = "*S1_S101.txt", path = path, full.names = TRUE)
# Check the file paths
str(Session2_gram_files)
print(Session2_gram_files)
path <- "EEG/data/Session 2/Export/"
# Get the list of files
Session2_gram_files <- list.files(pattern = "*S1_S101.txt", path = path, full.names = FALSE)
# Check the file paths
str(Session2_gram_files)
print(Session2_gram_files)
# Construct list of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_gram_files = as.vector(list.files(pattern = "*S1_S101.txt",
path = "EEG/data/Session 2/Export/") )
str(Session2_gram_files)
Session2_ungram_files = as.vector(list.files(pattern = "*S1_S102.txt"))
str(Session2_ungram_files)
# Construct list of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
# Check if files exist
file.exists(Session2_gram_files)
path <- "EEG/data/Session 2/Export/"
# Get the list of files
Session2_gram_files <- list.files(pattern = "*S1_S101.txt", path = path, full.names = TRUE)
# Check the file paths
str(Session2_gram_files)
print(Session2_gram_files)
# Check if files exist
file.exists(Session2_gram_files)
Session2_gram_files = as.vector(list.files(pattern = "*S1_S101.txt",
path = "EEG/data/Session 2/Export/") )
str(Session2_gram_files)
Session2_ungram_files = as.vector(list.files(pattern = "*S1_S102.txt"))
str(Session2_ungram_files)
# Construct list of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
getwd()
path <- "EEG/data/Session 2/Export/"
# Get the list of files
Session2_gram_files <- list.files(pattern = "*S1_S101.txt", path = path, full.names = TRUE)
# Check the file paths
str(Session2_gram_files)
print(Session2_gram_files)
# Check if files exist
file.exists(Session2_gram_files)
Session2_gram_files = as.vector(list.files(pattern = "*S1_S101.txt",
path = "EEG/data/Session 2/Export/") )
str(Session2_gram_files)
Session2_ungram_files = as.vector(list.files(pattern = "*S1_S102.txt"))
str(Session2_ungram_files)
Session2_gram_files = as.vector(list.files(pattern = "*S1_S101.txt",path = path, full.names = TRUE)
Session2_ungram_files = as.vector(list.files(pattern = "*S1_S102.txt"))
path <- "EEG/data/Session 2/Export/"
# Get the list of files
Session2_gram_files <- list.files(pattern = "*S1_S101.txt", path = path, full.names = TRUE)
# Check the file paths
str(Session2_gram_files)
print(Session2_gram_files)
# Check if files exist
file.exists(Session2_gram_files)
# Construct list of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
View(Session2_gram_list)
Session2_gram_files = as.vector(list.files(pattern = "*S1_S101.txt",
Session2_gram_files = as.vector(list.files(pattern = "*S1_S101.txt",
path = path, full.names = TRUE))
str(Session2_gram_files)
str(Session2_gram_files)
Session2_gram_files = as.vector(list.files(pattern = "*S1_S101.txt",
path = path, full.names = TRUE))
str(Session2_gram_files)
# Construct list of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
View(Session2_gram_list)
Session2_gram_data = ldply(Session2_gram_list, data.frame)
#TEST
library(plyr)
library(reshape2)
library(magrittr)
path <- "EEG/data/Session 2/Export/"
# Get the list of files
Session2_gram_files <- list.files(pattern = "*S1_S101.txt",
path = path, full.names = TRUE)
Session2_ungram_files <- list.files(pattern = "*S1_S102.txt",
path = path, full.names = TRUE)
# Check the file paths
str(Session2_gram_files)
print(Session2_gram_files)
str(Session2_ungram_files)
print(Session2_ungram_files)
# Check if files exist
file.exists(Session2_gram_files)
file.exists(Session2_ungram_files)
Session2_gram_files = as.vector(list.files(pattern = "*S1_S101.txt",
path = path, full.names = TRUE))
str(Session2_gram_files)
Session2_ungram_files = as.vector(list.files(pattern = "*S1_S102.txt"))
str(Session2_ungram_files)
str(Session2_gram_files)
Session2_ungram_files = as.vector(list.files(pattern = "*S1_S102.txt",
path = path, full.names = TRUE))
str(Session2_ungram_files)
Session2_ungram_files = as.vector(list.files(pattern = "*S1_S102.txt",
path = path, full.names = FALSE))
str(Session2_ungram_files)
Session2_gram_files = as.vector(list.files(pattern = "*S1_S101.txt",
path = path, full.names = FALSE))
str(Session2_gram_files)
Session2_ungram_files = as.vector(list.files(pattern = "*S1_S102.txt",
path = path, full.names = FALSE))
str(Session2_ungram_files)
# Construct list of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_gram_files = as.vector(list.files(pattern = "*S1_S101.txt",
path = path, full.names = TRUE))
str(Session2_gram_files)
Session2_ungram_files = as.vector(list.files(pattern = "*S1_S102.txt",
path = path, full.names = TRUE))
str(Session2_ungram_files)
# Construct list of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
View(Session2_gram_list)
Session2_ungram_list = lapply(1:length(Session2_ungram_files),function(x) {
read.table(Session2_ungram_files[x], header=FALSE) } )
View(Session2_ungram_list)
#lists as data frames
Session2_gram_data = ldply(Session2_gram_list, data.frame)
Session2_ungram_data = ldply(Session2_ungram_list, data.frame)
# Sort out column names
seq = seq(-200, 798, 2)	# In milliseconds: baseline period, trial
names(Session2_gram_data) = c('electrode', seq)
names(Session2_ungram_data) = c('electrode', seq)
Session2_gram_melted = melt(Session2_gram_data, id.vars="electrode")
Session2_gram_melted = Session2_gram_melted %>%
mutate(condition = "Session2_grammatical")
names(Session2_gram_melted) = c('electrode', 'time', 'microvolts','condition')
Session2_ungram_melted = melt(Session2_ungram_data, id.vars="electrode")
Session2_ungram_melted = Session2_ungram_melted %>%
mutate(condition = "Session2_ungrammatical")
names(Session2_ungram_melted) = c('electrode', 'time', 'microvolts','condition')
View(Session2_gram_melted)
View(Session2_gram_melted)
participants_gr = sub("_.*", "", Session2_gram_files)
head(participants_gr)
Session2_Gram_fulllist = mapply(function(x,y) rep(x, y), participants_gr, 59)
Session2_Gram_fulllist = unlist(Session2_Gram_fulllist)     # remove all factors, print long list
Session2_Gram_fulllist = rep(Session2_Gram_fulllist, 500)   # correct for individual time point
participants_gr = sub("*_.*", "", Session2_gram_files)
head(participants_gr)
Session2_Gram_fulllist = mapply(function(x,y) rep(x, y), participants_gr, 59)
Session2_Gram_fulllist = unlist(Session2_Gram_fulllist)     # remove all factors, print long list
Session2_Gram_fulllist = rep(Session2_Gram_fulllist, 500)   # correct for individual time point
participants_ungr = sub("_.*", "", Session2_ungram_files)
participants_gr = sub("path_.*", "", Session2_gram_files)
head(participants_gr)
participants_gr = sub(""path"_.*", "", Session2_gram_files)
participants_gr = sub("path_.*", "", Session2_gram_files)
head(participants_gr)
file_names <- basename(Session2_gram_files)
# Step 2: Extract participant numbers
participants <- sub("_.*", "", file_names)
# Display the result
print(participants)
Session2_ungram_files <- list.files(pattern = "*S1_S102.txt",
path = path, full.names = TRUE)
# Check the file paths
str(Session2_gram_files)
#TEST
library(plyr)
library(reshape2)
library(magrittr)
path <- "EEG/data/Session 2/Export/"
# Get the list of files
Session2_gram_files <- list.files(pattern = "*S1_S101.txt",
path = path, full.names = TRUE)
Session2_ungram_files <- list.files(pattern = "*S1_S102.txt",
path = path, full.names = TRUE)
# Check the file paths
str(Session2_gram_files)
print(Session2_gram_files)
str(Session2_ungram_files)
print(Session2_ungram_files)
#TEST
library(plyr)
library(reshape2)
library(magrittr)
path <- "EEG/data/Session 2/Export/"
# Get the list of files
Session2_gram_files <- list.files(pattern = "*S1_S101.txt",
path = path, full.names = TRUE)
# Check the file paths
str(Session2_gram_files)
Session2_gram_files <- list.files(pattern = "S1_S10[12].txt", path = path, full.names = TRUE)
Session2_files <- list.files(pattern = "S1_S10[12].txt", path = path, full.names = TRUE)
print(Session2_files)
View(Session2)
View(Session2_files)
str(Session2_files)
# Check if files exist
file.exists(Session2_files)
Session2_files = as.vector(list.files(pattern = "*S1_S101.txt",
path = path, full.names = TRUE))
str(Session2_gram_files)
Session2_files = as.vector(list.files(pattern = "S1_S10[12].txt",
path = path, full.names = TRUE))
str(Session2_gram_files)
# Construct list of data
Session2_list = lapply(1:length(Session2_files),function(x) {
read.table(Session2_files[x], header=FALSE) } )
View(Session2_list)
#lists as data frames
Session2_data = ldply(Session2_list, data.frame)
# Sort out column names
seq = seq(-200, 798, 2)	# In milliseconds: baseline period, trial
names(Session2_gram_data) = c('electrode', seq)
names(Session2_ungram_data) = c('electrode', seq)
names(Session2_data) = c('electrode', seq)
library(dplyr)
# Determine condition based on the filename
condition <- if (grepl("S101\\.txt$", filename)) "grammatical" else "ungrammatical"
# Determine condition based on the filename
condition <- if (grepl("S101\\.txt$", Session2_melted)) "grammatical" else "ungrammatical"
# Determine condition based on the filename
condition <- if (grepl("S101\\.txt$", Session2_list)) "grammatical" else "ungrammatical"
conditions <- ifelse(grepl("S101\\.txt$", Session2_list), "grammatical", "ungrammatical")
# Initialize an empty list to store results
all_melted_data <- list()
# Loop through each file and process
filename <- Session2_list[i]
filename <- Session2_list[]
condition <- conditions[i]
condition <- conditions[]
Session2_data <- read.table(filename, header = TRUE)
# Load necessary libraries
library(dplyr)
library(reshape2)
# Define the path to the directory
path <- "EEG/data/Session 2/Export/"
# Get the list of files matching the pattern
Session2_files <- list.files(pattern = "S1_S10[12].txt", path = path, full.names = TRUE)
# Function to process each file
process_file <- function(filename) {
# Read the data (adjust header parameter as needed)
data <- read.table(filename, header = TRUE)
# Melt the data
melted_data <- melt(data, id.vars = "electrode")
# Determine the condition based on the file name
condition <- ifelse(grepl("S101\\.txt$", filename), "grammatical", "ungrammatical")
# Add constant columns and rename columns
melted_data <- melted_data %>%
mutate(condition = condition,
session = "Session 2",
Property = "Gender") %>%
rename(Electrode = electrode, Time = variable, Microvolts = value)
return(melted_data)
}
# Apply the function to each file and store results in a list
Session2_list <- lapply(Session2_files, process_file)
# Combine all data frames into a single data frame
final_data <- do.call(rbind, Session2_list)
# Print the first few rows of the combined data
head(final_data)
# Apply the function to each file and store results in a list
Session2_list <- lapply(Session2_files, process_file)
path <- "EEG/data/Session 2/Export/"
Session2_files <- list.files(pattern = "S1_S10[12].txt", path = path, full.names = TRUE)
print(Session2_files)
str(Session2_files)
# Check if files exist
file.exists(Session2_files)
Session2_files = as.vector(list.files(pattern = "S1_S10[12].txt",
path = path, full.names = TRUE))
str(Session2_gram_files)
#TEST
library(plyr)
library(reshape2)
library(magrittr)
library(dplyr)
path <- "EEG/data/Session 2/Export/"
Session2_files <- list.files(pattern = "S1_S10[12].txt", path = path, full.names = TRUE)
print(Session2_files)
str(Session2_files)
# Check if files exist
file.exists(Session2_files)
Session2_files = as.vector(list.files(pattern = "S1_S10[12].txt",
path = path, full.names = TRUE))
str(Session2_gram_files)
str(Session2_files)
# Construct list of data
Session2_list = lapply(1:length(Session2_files),function(x) {
read.table(Session2_files[x], header=FALSE) } )
View(Session2_list)
#lists as data frames
Session2_data = ldply(Session2_list, data.frame)
# Sort out column names
seq = seq(-200, 798, 2)	# In milliseconds: baseline period, trial
names(Session2_data) = c('electrode', seq)
melted_data <- melted_data %>%
mutate(condition = condition,
session = "Session 2",
Property = "Gender") %>%
rename(Electrode = electrode, Time = variable, Microvolts = value)
# Now put it in long format where microvolts is a variable/identifier and shove them together
Session2_melted <- melt(Session2_data, id.vars = "electrode")
Session2_melted <- Session2_melted %>%
mutate(condition = condition,
session = "Session 2",
Property = "Gender") %>%
rename(Electrode = electrode, Time = variable, Microvolts = value)
Session2_melted <- Session2_melted %>%
mutate(condition = Condition,
session = "Session 2",
Property = "Gender") %>%
rename(Electrode = electrode, Time = variable, Microvolts = value)
names(Session2_melted) <- c('Electrode', 'Time', 'Microvolts', 'Condition', 'Session', 'Property')
# Adjust the fulllists to match the number of rows in the melted data frame if necessary
names <- names[1:nrow(Session2_melted)]
Session2_melted = melt(Session2_data, id.vars="electrode")
Session2_melted = Session2_melted %>%
mutate(condition = "Session2")
names(Session2_melted) = c('electrode', 'time', 'microvolts','condition')
View(Session2_melted)
file_names <- basename(Session2_files)
# Step 2: Extract participant numbers
participants <- sub("_.*", "", file_names)
head(participants_gr)
head(participants)
head(participants)
Session2_fulllist = mapply(function(x,y) rep(x, y), participants, 59)
Session2_fulllist = unlist(Session2_fulllist)     # remove all factors, print long list
Session2_fulllist = rep(Session2_fulllist, 500)   # correct for individual time point
# Adjust the fulllists to match the number of rows in the melted data frame if necessary
Session2_fulllist <- Session2_fulllist[1:nrow(Session2_melted)]
# second, create a column in the melted dataframes saying which participant is at each data point
Session2_melted = Session2_melted %>%
mutate(participants = Session2_fulllist)
#testing frame
print(Session2_melted)
head(Session2_melted)
View(Session2_melted)
View(Session2_melted)
#TEST
library(plyr)
library(reshape2)
library(magrittr)
library(dplyr)
path <- "EEG/data/Session 2/Export/"
Session2_files <- list.files(pattern = "S1_S10[12].txt", path = path, full.names = TRUE)
print(Session2_files)
str(Session2_files)
# Check if files exist
file.exists(Session2_files)
Session2_files = as.vector(list.files(pattern = "S1_S10[12].txt",
path = path, full.names = TRUE))
str(Session2_files)
# Construct list of data
Session2_list = lapply(1:length(Session2_files),function(x) {
read.table(Session2_files[x], header=FALSE) } )
View(Session2_list)
#lists as data frames
Session2_data = ldply(Session2_list, data.frame)
# Sort out column names
seq = seq(-200, 798, 2)	# In milliseconds: baseline period, trial
# Sort out column names
seq = seq(-100, 110, 2)	# In milliseconds: baseline period, trial
names(Session2_data) = c('electrode', seq)
# Now put it in long format where microvolts is a variable/identifier and shove them together
Session2_melted <- melt(Session2_data, id.vars = "electrode")
# Now put it in long format where microvolts is a variable/identifier and shove them together
Session2_melted = melt(Session2_data, id.vars="electrode")
Session2_melted = Session2_melted %>%
mutate(condition = "Session2")
Session2_melted = Session2_melted %>%
mutate(condition = "Session2")
names(Session2_melted) = c('Electrode', 'Time', 'Microvolts','Condition', 'Session', 'Property')
View(Session2_melted)
# Add constant columns
Session2_melted <- Session2_melted %>%
mutate(Session = "Session 2",
Property = "Gender")
# Rename columns if needed
names(Session2_melted) <- c('Electrode', 'Time', 'Microvolts', 'Session', 'Property')
# Now put it in long format where microvolts is a variable/identifier and shove them together
Session2_melted = melt(Session2_data, id.vars="electrode")
Session2_melted = Session2_melted %>%
mutate(condition = "Session2")
names(Session2_melted) = c('Electrode', 'Time', 'Microvolts','Condition', 'Session', 'Property')
View(Session2_melted)
# Now put it in long format where microvolts is a variable/identifier and shove them together
Session2_melted = melt(Session2_data, id.vars="electrode")
Session2_melted = Session2_melted %>%
mutate(condition = "Session2")
# Add constant columns
Session2_melted <- Session2_melted %>%
mutate(Session = "Session 2",
Property = "Gender")
# Rename columns if needed
names(Session2_melted) <- c('Electrode', 'Time', 'Microvolts', 'Session', 'Property')
names(Session2_melted) = c('Electrode', 'Time', 'Microvolts','Condition', 'Session', 'Property')
View(Session2_melted)
file_names <- basename(Session2_files)
# Step 2: Extract participant numbers
participants <- sub("_.*", "", file_names)
head(participants)
Session2_fulllist = mapply(function(x,y) rep(x, y), participants, 59)
Session2_fulllist = unlist(Session2_fulllist)     # remove all factors, print long list
Session2_fulllist = rep(Session2_fulllist, 500)   # correct for individual time point
# Adjust the fulllists to match the number of rows in the melted data frame if necessary
Session2_fulllist <- Session2_fulllist[1:nrow(Session2_melted)]
# second, create a column in the melted dataframes saying which participant is at each data point
Session2_melted = Session2_melted %>%
mutate(participants = Session2_fulllist)
#testing frame
print(Session2_melted)
head(Session2_melted)
View(Session2_melted)
