Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = path, full.names = TRUE)
#Checking the file paths
print(Session2_gram_files)
print(Session2_violation_interest)
print(Session2_ancillary_violation)
#Checking if files exist
file.exists(Session2_gram_files)
file.exists(Session2_violation_interest)
file.exists(Session2_ancillary_violation)
# Constructing lists of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
# converting the lists into data frames
Session2_gram_data = ldply(Session2_gram_list, data.frame)
Session2_violation_interest_data = ldply(Session2_violation_interest_list, data.frame)
Session2_ancillary_violation_data = ldply (Session2_ancillary_violation_list, data.frame)
#Sorting out column names
seq = seq(-100, 1098, 2)	# In milliseconds: baseline period, trial
#assigning column names
names(Session2_gram_data) = c('Electrode', seq)
names(Session2_violation_interest_data) = c('Electrode', seq)
names(Session2_ancillary_violation_data) = c ('Electrode', seq)
####### IMPROVE by separating the Session and condition columns
Session2_gram_melted = melt(Session2_gram_data, id.vars="Electrode")
Session2_gram_melted = Session2_gram_melted %>%
mutate(condition = "Session2_grammatical")
names(Session2_gram_melted) = c('Electrode', 'Time', 'Activation','Condition')
Session2_violation_interest_melted = melt(Session2_violation_interest_data, id.vars="Electrode")
Session2_violation_interest_melted = Session2_violation_interest_melted %>%
mutate(condition = "Session2_violation_interest")
names(Session2_violation_interest_melted) = c('Electrode', 'Time', 'Activation','Condition')
Session2_ancillary_violation_melted = melt(Session2_violation_interest_data, id.vars="Electrode")
Session2_ancillary_violation_melted = Session2_ancillary_violation_melted %>%
mutate(condition = "Session2_ancillary_violation")
names(Session2_ancillary_violation_melted) = c('Electrode', 'Time', 'Activation','Condition')
#removing the path from the participants' names
file_names_gram <- basename(Session2_gram_files)
files_names_violation_interest <- basename(Session2_violation_interest)
files_names_ancillary_violation <- basename(Session2_ancillary_violation)
#Extract participant numbers
participants_gr <- sub("_.*", "", file_names_gram)
participants_violint = sub("_.*", "", files_names_violation_interest)
participants_ancvil = sub("_.*", "", files_names_ancillary_violation)
head(participants_gr)
head(participants_violint)
head(participants_ancvil)
# Adjust the fulllists to match the number of rows in the melted data frame if necessary
Session2_Gram_fulllist <- Session2_Gram_fulllist[1:nrow(Session2_gram_melted)]
Session2_violation_interest_fulllist <- Session2_violation_interest_fulllist[1:nrow(Session2_violation_interest_melted)]
Session2_ancillary_violation_fulllist <- Session2_ancillary_violation_fulllist[1:nrow(Session2_ancillary_violation_melted)]
# second, create a column in the melted dataframes saying which participant is at each data point
Session2_gram_melted = Session2_gram_melted %>%
mutate(participant= Session2_Gram_fulllist)
Session2_violation_interest_melted = Session2_violation_interest_melted %>%
mutate(participant = Session2_violation_interest_fulllist)
Session2_ancillary_violation_melted = Session2_ancillary_violation_melted %>%
mutate(participant = Session2_ancillary_violation_fulllist)
#testing the frame
print(Session2_gram_melted)
head(Session2_gram_melted)
#View(Session2_gram_melted)
print(Session2_violation_interest_melted)
head(Session2_violation_interest_melted)
#View(Session2_violation_interest_melted)
print(Session2_ancillary_violation_melted)
head(Session2_ancillary_violation_melted)
# Combine the two data frames
Session2_combined_dtf <- rbind(Session2_gram_melted, Session2_violation_interest_melted, Session2_ancillary_violation_melted)
# Check the combined data
print(Session2_combined_dtf)
head(Session2_combined_dtf)
View(Session2_combined_dtf)
# second, create a column in the melted dataframes saying which participant is at each data point
Session2_gram_melted <- Session2_gram_melted %>%
mutate(participant = Session2_Gram_fulllist)
Session2_violation_interest_melted <- Session2_violation_interest_melted %>%
mutate(participant = Session2_violation_interest_fulllist)
Session2_ancillary_violation_melted <- Session2_ancillary_violation_melted %>%
mutate(participant = Session2_ancillary_violation_fulllist)
library(plyr)
library(reshape2)
library(magrittr)
library(dplyr)
path <- "EEG/data/Session 2/Export/"
#getting the list of files
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = path, full.names = TRUE)
#Checking the file paths
print(Session2_gram_files)
print(Session2_violation_interest)
print(Session2_ancillary_violation)
#Checking if files exist
file.exists(Session2_gram_files)
file.exists(Session2_violation_interest)
file.exists(Session2_ancillary_violation)
# Constructing lists of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
# converting the lists into data frames
Session2_gram_data = ldply(Session2_gram_list, data.frame)
Session2_violation_interest_data = ldply(Session2_violation_interest_list, data.frame)
Session2_ancillary_violation_data = ldply (Session2_ancillary_violation_list, data.frame)
#Sorting out column names
seq = seq(-100, 1098, 2)	# In milliseconds: baseline period, trial
#assigning column names
names(Session2_gram_data) = c('Electrode', seq)
names(Session2_violation_interest_data) = c('Electrode', seq)
names(Session2_ancillary_violation_data) = c ('Electrode', seq)
#removing the path from the participants' names
file_names_gram <- basename(Session2_gram_files)
files_names_violation_interest <- basename(Session2_violation_interest)
files_names_ancillary_violation <- basename(Session2_ancillary_violation)
#Extract participant numbers
participants_gr <- sub("_.*", "", file_names_gram)
participants_violint = sub("_.*", "", files_names_violation_interest)
participants_ancvil = sub("_.*", "", files_names_ancillary_violation)
head(participants_gr)
head(participants_violint)
head(participants_ancvil)
####### IMPROVE by separating the Session and condition columns
Session2_gram_melted = melt(Session2_gram_data, id.vars="Electrode") %>%
mutate(condition = "Session2_grammatical")
names(Session2_gram_melted) = c('Electrode', 'Time', 'Activation','Condition')
Session2_violation_interest_melted = melt(Session2_violation_interest_data, id.vars="Electrode") %>%
mutate(condition = "Session2_violation_interest")
names(Session2_violation_interest_melted) = c('Electrode', 'Time', 'Activation','Condition')
Session2_ancillary_violation_melted = melt(Session2_violation_interest_data, id.vars="Electrode") %>%
mutate(condition = "Session2_ancillary_violation")
names(Session2_ancillary_violation_melted) = c('Electrode', 'Time', 'Activation','Condition')
# Create a full list for participants for each melted data frame
Session2_Gram_fulllist <- rep(participants_gr, each = nrow(Session2_gram_melted) / length(participants_gr))
Session2_violation_interest_fulllist <- rep(participants_violint, each = nrow(Session2_violation_interest_melted) / length(participants_violint))
Session2_ancillary_violation_fulllist <- rep(participants_ancvil, each = nrow(Session2_ancillary_violation_melted) / length(participants_ancvil))
# Adjust the lengths of the fulllist vectors if they don't match
Session2_Gram_fulllist <- rep(Session2_Gram_fulllist, length.out = nrow(Session2_gram_melted))
Session2_violation_interest_fulllist <- rep(Session2_violation_interest_fulllist, length.out = nrow(Session2_violation_interest_melted))
Session2_ancillary_violation_fulllist <- rep(Session2_ancillary_violation_fulllist, length.out = nrow(Session2_ancillary_violation_melted))
# second, create a column in the melted dataframes saying which participant is at each data point
Session2_gram_melted <- Session2_gram_melted %>%
mutate(participant = Session2_Gram_fulllist)
Session2_violation_interest_melted <- Session2_violation_interest_melted %>%
mutate(participant = Session2_violation_interest_fulllist)
Session2_ancillary_violation_melted <- Session2_ancillary_violation_melted %>%
mutate(participant = Session2_ancillary_violation_fulllist)
#testing the frame
print(Session2_gram_melted)
head(Session2_gram_melted)
#View(Session2_gram_melted)
print(Session2_violation_interest_melted)
head(Session2_violation_interest_melted)
#View(Session2_violation_interest_melted)
print(Session2_ancillary_violation_melted)
head(Session2_ancillary_violation_melted)
# Combine the two data frames
#Session2_combined_dtf <- rbind(Session2_gram_melted, Session2_violation_interest_melted, Session2_ancillary_violation_melted)
Session2_combined_dtf <- bind_rows(
Session2_gram_melted,
Session2_violation_interest_melted,
Session2_ancillary_violation_melted
)
# Check the combined data
print(Session2_combined_dtf)
head(Session2_combined_dtf)
View(Session2_combined_dtf)
# Check unique values in Electrode column before subsetting
print(unique(Session2_combined_dtf$Electrode))
#dividing the electrodes into brain regions
Session2_combined_dtf <- Session2_combined_dtf %>%
mutate(Region = case_when(
Electrode %in% c("T7", "C3", "CP5") ~ "left medial",
Electrode %in% c("T8", "C4", "CP6") ~ "right medial",
Electrode %in% c("Fp1", "F3", "F7", "FT9", "FC5") ~ "left anterior",
Electrode %in% c("Fp2", "F4", "F8", "FT10", "FC6") ~ "right anterior",
Electrode %in% c("P7", "P3", "O1") ~ "left posterior",
Electrode %in% c("P8", "P4", "O2", "FC6") ~ "right posterior",
Electrode %in% c("Fz", "FC1", "FC2") ~ "midline anterior",
Electrode %in% c("Cz", "CP1", "CP2") ~ "midline medial",
Electrode %in% c("Pz", "Oz") ~ "midline posterior",
TRUE ~ "Other"
))
# Check unique values in Region column
print(unique(Session2_combined_dtf$Region))
# View the updated data frame
View(Session2_combined_dtf)
# Subset the data frame for the N200 time window (200-500 ms)
S2_N200 <- Session2_combined_dtf[Session2_combined_dtf$Time %in% seq(200, 500, 2),]
print(unique(Session2_combined_dtf$Region))
# Identify rows that could not be converted to numeric
problematic_rows <- S2_N200 %>%
filter(is.na(Activation))
# Inspect problematic rows
print(problematic_rows)
View(problematic_rows)
# Ensure Time and Region are factors
S2_N200$Time <- factor(S2_N200$Time)
S2_N200$Region <- factor(S2_N200$Region)
# Check the levels of Time and Region
levels(S2_N200$Time)
levels(S2_N200$Region)
# Check for NA, NaN, and Inf values in the Activation column
summary(S2_N200$Activation)
View(S2_N200)
# checking for NA, NaN, and Inf values in each column
check_values <- function(df) {
sapply(df, function(x) any(is.na(x) | is.nan(x) | is.infinite(x)))
}
# Apply the function to the S2_N200 data frame
columns_with_issues <- check_values(S2_N200)
# Print columns that have any NA, NaN, or Inf values
names(columns_with_issues[columns_with_issues == TRUE])
# Check the subsetted data
print(S2_N200)
head(S2_N200)
str(S2_N200)
View(S2_N200)
# Perform ANOVA with Region and Time as factors, including the interaction between them
anova_result <- aov(Activation ~ Region * Time, data = S2_N200)
# Summary of Activation to check for NA, NaN, or Inf
summary(S2_N200$Activation)
View(S2_N200)
# checking for NA, NaN, and Inf values in each column
check_values <- function(df) {
sapply(df, function(x) any(is.na(x) | is.nan(x) | is.infinite(x)))
}
library(plyr)
library(reshape2)
library(magrittr)
library(dplyr)
path <- "EEG/data/Session 2/Export/"
#getting the list of files
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = path, full.names = TRUE)
#Checking the file paths
print(Session2_gram_files)
print(Session2_violation_interest)
print(Session2_ancillary_violation)
#Checking if files exist
file.exists(Session2_gram_files)
file.exists(Session2_violation_interest)
file.exists(Session2_ancillary_violation)
# Constructing lists of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
# converting the lists into data frames
Session2_gram_data = ldply(Session2_gram_list, data.frame)
Session2_violation_interest_data = ldply(Session2_violation_interest_list, data.frame)
Session2_ancillary_violation_data = ldply (Session2_ancillary_violation_list, data.frame)
#Sorting out column names
seq = seq(-100, 1098, 2)	# In milliseconds: baseline period, trial
#assigning column names
names(Session2_gram_data) = c('Electrode', seq)
names(Session2_violation_interest_data) = c('Electrode', seq)
names(Session2_ancillary_violation_data) = c ('Electrode', seq)
#removing the path from the participants' names
file_names_gram <- basename(Session2_gram_files)
files_names_violation_interest <- basename(Session2_violation_interest)
files_names_ancillary_violation <- basename(Session2_ancillary_violation)
#Extract participant numbers
participants_gr <- sub("_.*", "", file_names_gram)
participants_violint = sub("_.*", "", files_names_violation_interest)
participants_ancvil = sub("_.*", "", files_names_ancillary_violation)
head(participants_gr)
head(participants_violint)
head(participants_ancvil)
####### IMPROVE by separating the Session and condition columns
Session2_gram_melted = melt(Session2_gram_data, id.vars="Electrode") %>%
mutate(condition = "Session2_grammatical")
names(Session2_gram_melted) = c('Electrode', 'Time', 'Activation','Condition')
Session2_violation_interest_melted = melt(Session2_violation_interest_data, id.vars="Electrode") %>%
mutate(condition = "Session2_violation_interest")
names(Session2_violation_interest_melted) = c('Electrode', 'Time', 'Activation','Condition')
Session2_ancillary_violation_melted = melt(Session2_violation_interest_data, id.vars="Electrode") %>%
mutate(condition = "Session2_ancillary_violation")
names(Session2_ancillary_violation_melted) = c('Electrode', 'Time', 'Activation','Condition')
# create participant lists
Session2_Gram_fulllist <- rep(participants_gr, each = nrow(Session2_gram_melted) / length(participants_gr))
Session2_violation_interest_fulllist <- rep(participants_violint, each = nrow(Session2_violation_interest_melted) / length(participants_violint))
Session2_ancillary_violation_fulllist <- rep(participants_ancvil, each = nrow(Session2_ancillary_violation_melted) / length(participants_ancvil))
# Adjust the lengths of the fulllist vectors if they don't match
Session2_Gram_fulllist <- rep(Session2_Gram_fulllist, length.out = nrow(Session2_gram_melted))
Session2_violation_interest_fulllist <- rep(Session2_violation_interest_fulllist, length.out = nrow(Session2_violation_interest_melted))
Session2_ancillary_violation_fulllist <- rep(Session2_ancillary_violation_fulllist, length.out = nrow(Session2_ancillary_violation_melted))
# second, create a column in the melted dataframes saying which participant is at each data point
Session2_gram_melted <- Session2_gram_melted %>%
mutate(participant = Session2_Gram_fulllist)
Session2_violation_interest_melted <- Session2_violation_interest_melted %>%
mutate(participant = Session2_violation_interest_fulllist)
Session2_ancillary_violation_melted <- Session2_ancillary_violation_melted %>%
mutate(participant = Session2_ancillary_violation_fulllist)
#testing the frame
print(Session2_gram_melted)
head(Session2_gram_melted)
#View(Session2_gram_melted)
print(Session2_violation_interest_melted)
head(Session2_violation_interest_melted)
#View(Session2_violation_interest_melted)
print(Session2_ancillary_violation_melted)
head(Session2_ancillary_violation_melted)
# Combine the two data frames
#Session2_combined_dtf <- rbind(Session2_gram_melted, Session2_violation_interest_melted, Session2_ancillary_violation_melted)
Session2_combined_dtf <- bind_rows(
Session2_gram_melted,
Session2_violation_interest_melted,
Session2_ancillary_violation_melted
)
# Check the combined data
print(Session2_combined_dtf)
head(Session2_combined_dtf)
View(Session2_combined_dtf)
# Check unique values in Electrode column before subsetting
print(unique(Session2_combined_dtf$Electrode))
#dividing the electrodes into brain regions
Session2_combined_dtf <- Session2_combined_dtf %>%
mutate(Region = case_when(
Electrode %in% c("T7", "C3", "CP5") ~ "left medial",
Electrode %in% c("T8", "C4", "CP6") ~ "right medial",
Electrode %in% c("Fp1", "F3", "F7", "FT9", "FC5") ~ "left anterior",
Electrode %in% c("Fp2", "F4", "F8", "FT10", "FC6") ~ "right anterior",
Electrode %in% c("P7", "P3", "O1") ~ "left posterior",
Electrode %in% c("P8", "P4", "O2", "FC6") ~ "right posterior",
Electrode %in% c("Fz", "FC1", "FC2") ~ "midline anterior",
Electrode %in% c("Cz", "CP1", "CP2") ~ "midline medial",
Electrode %in% c("Pz", "Oz") ~ "midline posterior",
TRUE ~ "Other"
))
# Check unique values in Region column
print(unique(Session2_combined_dtf$Region))
# View the updated data frame
View(Session2_combined_dtf)
# View the updated data frame
View(Session2_combined_dtf)
# Subset the data frame for the N200 time window (200-500 ms)
S2_N200 <- Session2_combined_dtf[Session2_combined_dtf$Time %in% seq(200, 500, 2),]
print(unique(Session2_combined_dtf$Region))
library(plyr)
library(reshape2)
library(magrittr)
library(dplyr)
path <- "EEG/data/Session 2/Export/"
#getting the list of files
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = path, full.names = TRUE)
#Checking the file paths
print(Session2_gram_files)
print(Session2_violation_interest)
print(Session2_ancillary_violation)
#Checking if files exist
file.exists(Session2_gram_files)
file.exists(Session2_violation_interest)
file.exists(Session2_ancillary_violation)
# Constructing lists of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
View(Session2_gram_list)
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
View(Session2_violation_interest_list)
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
View(Session2_ancillary_violation_list)
# converting the lists into data frames
Session2_gram_data = ldply(Session2_gram_list, data.frame)
Session2_violation_interest_data = ldply(Session2_violation_interest_list, data.frame)
Session2_ancillary_violation_data = ldply (Session2_ancillary_violation_list, data.frame)
View(Session2_gram_data)
#Sorting out column names
seq = seq(-100, 1098, 2)	# In milliseconds: baseline period, trial
#assigning column names
names(Session2_gram_data) = c('Electrode', seq)
names(Session2_violation_interest_data) = c('Electrode', seq)
names(Session2_ancillary_violation_data) = c ('Electrode', seq)
View(Session2_gram_data)
#removing the path from the participants' names
file_names_gram <- basename(Session2_gram_files)
files_names_violation_interest <- basename(Session2_violation_interest)
files_names_ancillary_violation <- basename(Session2_ancillary_violation)
View(Session2_gram_data)
#Extract participant numbers
participants_gr <- sub("_.*", "", file_names_gram)
participants_violint = sub("_.*", "", files_names_violation_interest)
participants_ancvil = sub("_.*", "", files_names_ancillary_violation)
head(participants_gr)
head(participants_violint)
head(participants_ancvil)
####### IMPROVE by separating the Session and condition columns
Session2_gram_melted = melt(Session2_gram_data, id.vars="Electrode") %>%
mutate(condition = "Session2_grammatical")
names(Session2_gram_melted) = c('Electrode', 'Time', 'Activation','Condition')
View(Session2_gram_melted)
Session2_violation_interest_melted = melt(Session2_violation_interest_data, id.vars="Electrode") %>%
mutate(condition = "Session2_violation_interest")
View(Session2_violation_interest_melted)
names(Session2_violation_interest_melted) = c('Electrode', 'Time', 'Activation','Condition')
View(Session2_violation_interest_melted)
Session2_ancillary_violation_melted = melt(Session2_violation_interest_data, id.vars="Electrode") %>%
mutate(condition = "Session2_ancillary_violation")
names(Session2_ancillary_violation_melted) = c('Electrode', 'Time', 'Activation','Condition')
# create participant lists
Session2_Gram_fulllist <- rep(participants_gr, each = nrow(Session2_gram_melted) / length(participants_gr))
# create participant lists
Session2_Gram_fulllist <- rep(participants_gr, each = nrow(Session2_gram_melted) / length(participants_gr))
Session2_violation_interest_fulllist <- rep(participants_violint, each = nrow(Session2_violation_interest_melted) / length(participants_violint))
Session2_ancillary_violation_fulllist <- rep(participants_ancvil, each = nrow(Session2_ancillary_violation_melted) / length(participants_ancvil))
View(Session2_Gram_fulllist)
# create a column in the melted dataframes saying which participant is at each data point
Session2_gram_melted <- Session2_gram_melted %>%
mutate(participant = Session2_Gram_fulllist)
Session2_violation_interest_melted <- Session2_violation_interest_melted %>%
mutate(participant = Session2_violation_interest_fulllist)
Session2_ancillary_violation_melted <- Session2_ancillary_violation_melted %>%
mutate(participant = Session2_ancillary_violation_fulllist)
#testing the frame
print(Session2_gram_melted)
head(Session2_gram_melted)
View(Session2_gram_melted)
# create participant lists
Session2_Gram_fulllist <- rep(participants_gr, each = nrow(Session2_gram_melted) / length(participants_gr))
Session2_violation_interest_fulllist <- rep(participants_violint, each = nrow(Session2_violation_interest_melted) / length(participants_violint))
Session2_ancillary_violation_fulllist <- rep(participants_ancvil, each = nrow(Session2_ancillary_violation_melted) / length(participants_ancvil))
# create a column in the melted dataframes saying which participant is at each data point
Session2_gram_melted <- Session2_gram_melted %>%
mutate(participant = Session2_Gram_fulllist)
library(plyr)
library(reshape2)
library(magrittr)
library(dplyr)
path <- "EEG/data/Session 2/Export/"
#getting the list of files
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = path, full.names = TRUE)
#Checking the file paths
print(Session2_gram_files)
print(Session2_violation_interest)
print(Session2_ancillary_violation)
# Constructing lists of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
# converting the lists into data frames
Session2_gram_data = ldply(Session2_gram_list, data.frame)
Session2_violation_interest_data = ldply(Session2_violation_interest_list, data.frame)
Session2_ancillary_violation_data = ldply (Session2_ancillary_violation_list, data.frame)
#Sorting out column names
#time is organised in miliseconds, from -100 to 1098, and counted every 2 ms
seq = seq(-100, 1098, 2)
#assigning column names per electrode and time intervals
names(Session2_gram_data) = c('Electrode', seq)
names(Session2_violation_interest_data) = c('Electrode', seq)
names(Session2_ancillary_violation_data) = c ('Electrode', seq)
#assigning participants' names
#removing the path from the participants' names so their column can be named accurately
file_names_gram <- basename(Session2_gram_files)
files_names_violation_interest <- basename(Session2_violation_interest)
files_names_ancillary_violation <- basename(Session2_ancillary_violation)
View(Session2_gram_data)
#Extract participant numbers
participants_gr <- sub("_.*", "", file_names_gram)
participants_violint = sub("_.*", "", files_names_violation_interest)
participants_ancvil = sub("_.*", "", files_names_ancillary_violation)
head(participants_gr)
head(participants_violint)
head(participants_ancvil)
# Melt the data frames and add a condition column
Session2_gram_melted = melt(Session2_gram_data, id.vars="Electrode") %>%
mutate(condition = "Session2_grammatical")
names(Session2_gram_melted) = c('Electrode', 'Time', 'Activation','Condition')
Session2_violation_interest_melted = melt(Session2_violation_interest_data, id.vars="Electrode") %>%
mutate(condition = "Session2_violation_interest")
names(Session2_violation_interest_melted) = c('Electrode', 'Time', 'Activation','Condition')
Session2_ancillary_violation_melted = melt(Session2_violation_interest_data, id.vars="Electrode") %>%
mutate(condition = "Session2_ancillary_violation")
names(Session2_ancillary_violation_melted) = c('Electrode', 'Time', 'Activation','Condition')
# Check the number of rows in each melted data frame
n_gram_rows <- nrow(Session2_gram_melted)
n_violation_interest_rows <- nrow(Session2_violation_interest_melted)
n_ancillary_violation_rows <- nrow(Session2_ancillary_violation_melted)
list(n_gram_rows)
list (n_violation_interest_rows)
lits(n_ancillary_violation_rows)
list(n_ancillary_violation_rows)
