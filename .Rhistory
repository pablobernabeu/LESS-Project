Session2_melted_data <- Session2_melted_data_dirty %>%
filter(complete.cases(.))  # Removes rows with NA values in any column
# Alternatively, if you want to remove rows with NaN values specifically
Session2_melted_data <- Session2_melted_data_dirty %>%
filter(!is.nan(Activation)) %>%
filter(complete.cases(.))  # Ensure no NA values are left
# View the cleaned data
View(Session2_melted_data)
# Group by 'Region' and calculate the mean of 'Activation'
mean_activations <- Session2_melted_data %>%
group_by(Region) %>%
summarize(mean_activation = mean(Activation))
print(mean_activations)
# Group by 'Region' and calculate the mean of 'Activation'
mean_activations <- Session2_melted_data %>%
group_by(Region) %>%
summarize(mean_activation = mean(Activation, na.rm = TRUE))
print(mean_activations)
# Group by 'Region' and calculate the mean of 'Activation'
mean_activations <- Session2_melted_data %>%
group_by(Region, na.rm = TRUE) %>%
summarize(mean_activation = mean(Activation, na.rm = TRUE))
print(mean_activations)
Session2_melted_data$Activation <- as.numeric(Session2_melted_data$Activation)
# Group by 'Region' and calculate the mean of 'Activation'
mean_activations <- Session2_melted_data %>%
group_by(Region) %>%
summarize(mean_activation = mean(Activation, na.rm = TRUE), .groups = 'drop')
# Print the result
print(mean_activations)
suppressWarnings({
df %>%
mutate(
response_num =
case_when(
trial == "two" & response_char == "No" ~ 0,
trial == "one" ~ as.numeric(response_char)
)
)})
# View the cleaned data
View(Session2_melted_data)
library(plyr)
library(reshape2)
library(magrittr)
library(dplyr)
library(ggplot2)
path <- "EEG/data/Session 2/Export/"
#getting the list of files
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = path, full.names = TRUE)
#Checking the file paths
print(Session2_gram_files)
print(Session2_violation_interest)
print(Session2_ancillary_violation)
# Constructing lists of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
# converting the lists into data frames
Session2_gram_data = ldply(Session2_gram_list, data.frame)
Session2_violation_interest_data = ldply(Session2_violation_interest_list, data.frame)
Session2_ancillary_violation_data = ldply (Session2_ancillary_violation_list, data.frame)
# the time column is organised in miliseconds, from -100 to 1098, and counted every 2 ms
seq = seq(-100, 1098, 2)
# the electrode column is formulated as a vector of electrode names that correspond to the time interval sequence
names(Session2_gram_data) = c('Electrode', seq)
names(Session2_violation_interest_data) = c('Electrode', seq)
names(Session2_ancillary_violation_data) = c ('Electrode', seq)
# working on the participants' name column
#removing the path from the participants' names so their column can be named succintly
file_names_gram <- basename(Session2_gram_files)
files_names_violation_interest <- basename(Session2_violation_interest)
files_names_ancillary_violation <- basename(Session2_ancillary_violation)
#Extract participant numbers
participants_gr <- sub("_.*", "", file_names_gram)
participants_violint = sub("_.*", "", files_names_violation_interest)
participants_ancvil = sub("_.*", "", files_names_ancillary_violation)
# adding participant columns to the data frames
Session2_gram_data$Participant <- rep(participants_gr, each = nrow(Session2_gram_data) / length(participants_gr))
Session2_violation_interest_data$Participant <- rep(participants_violint, each = nrow(Session2_violation_interest_data) / length(participants_violint))
Session2_ancillary_violation_data$Participant <- rep(participants_ancvil, each = nrow(Session2_ancillary_violation_data) / length(participants_ancvil))
# adding condition column to the dataframes
Session2_gram_data$Condition <- 'Grammatical'
Session2_violation_interest_data$Condition <- 'Violation_of_Interest'
Session2_ancillary_violation_data$Condition <- 'Ancillary_Violation'
# Combine all data frames into one
Session2_combined_data <- rbind(Session2_gram_data, Session2_violation_interest_data, Session2_ancillary_violation_data)
#dividing the electrodes into brain regions
# Define the mapping of electrodes to regions
electrode_to_region <- c(
"T7" = "left medial",
"C3" = "left medial",
"CP5" = "left medial",
"T8" = "right medial",
"C4" = "right medial",
"CP6" = "right medial",
"Fp1" = "left anterior",
"F3" = "left anterior",
"F7" = "left anterior",
"FT9" = "left anterior",
"FC5" = "left anterior",
"Fp2" = "right anterior",
"F4" = "right anterior",
"F8" = "right anterior",
"FT10" = "right anterior",
"FC6" = "right anterior",
"P7" = "left posterior",
"P3" = "left posterior",
"O1" = "left posterior",
"P8" = "right posterior",
"P4" = "right posterior",
"O2" = "right posterior",
"Fz" = "midline anterior",
"FC1" = "midline anterior",
"FC2" = "midline anterior",
"Cz" = "midline medial",
"CP1" = "midline medial",
"CP2" = "midline medial",
"Pz" = "midline posterior",
"Oz" = "midline posterior"
)
# Add Region column based on electrode_to_region mapping
Session2_combined_data <- Session2_combined_data %>%
mutate(Region = electrode_to_region[Electrode])
# Melt the combined data frame to convert it from wide to long format
Session2_melted_data_dirty <- melt(Session2_combined_data, id.vars = c('Participant', 'Electrode', 'Condition', 'Region'), variable.name = 'Time', value.name = 'Activation')
# Convert the 'Time' column to numeric
Session2_melted_data_dirty$Time <- as.numeric(as.character(Session2_melted_data_dirty$Time))
# Add the Session column
Session2_melted_data_dirty$Session <- 'Session 2'
# View the resulting melted data
View(Session2_melted_data_dirty)
# Removing rows where any column has NA or NaN values
Session2_melted_data <- Session2_melted_data_dirty %>%
filter(complete.cases(.))  # Removes rows with NA values in any column
# Alternatively, if you want to remove rows with NaN values specifically
Session2_melted_data <- Session2_melted_data_dirty %>%
filter(!is.nan(Activation)) %>%
filter(complete.cases(.))  # Ensure no NA values are left
# View the cleaned data
View(Session2_melted_data)
Session2_melted_data$Activation <- as.numeric(Session2_melted_data$Activation)
# Group by 'Region' and calculate the mean of 'Activation'
mean_activations <- Session2_melted_data %>%
group_by(Region) %>%
summarize(mean_activation = mean(Activation, na.rm = TRUE), .groups = 'drop')
# Print the result
print(mean_activations)
# View the cleaned data
View(Session2_melted_data)
library(plyr)
library(reshape2)
library(magrittr)
library(dplyr)
library(ggplot2)
path <- "EEG/data/Session 2/Export/"
#getting the list of files
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = path, full.names = TRUE)
#Checking the file paths
print(Session2_gram_files)
print(Session2_violation_interest)
print(Session2_ancillary_violation)
# Constructing lists of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
# converting the lists into data frames
Session2_gram_data = ldply(Session2_gram_list, data.frame)
Session2_violation_interest_data = ldply(Session2_violation_interest_list, data.frame)
Session2_ancillary_violation_data = ldply (Session2_ancillary_violation_list, data.frame)
# the time column is organised in miliseconds, from -100 to 1098, and counted every 2 ms
seq = seq(-100, 1098, 2)
# the electrode column is formulated as a vector of electrode names that correspond to the time interval sequence
names(Session2_gram_data) = c('Electrode', seq)
names(Session2_violation_interest_data) = c('Electrode', seq)
names(Session2_ancillary_violation_data) = c ('Electrode', seq)
# working on the participants' name column
#removing the path from the participants' names so their column can be named succintly
file_names_gram <- basename(Session2_gram_files)
files_names_violation_interest <- basename(Session2_violation_interest)
files_names_ancillary_violation <- basename(Session2_ancillary_violation)
#Extract participant numbers
participants_gr <- sub("_.*", "", file_names_gram)
participants_violint = sub("_.*", "", files_names_violation_interest)
participants_ancvil = sub("_.*", "", files_names_ancillary_violation)
# adding participant columns to the data frames
Session2_gram_data$Participant <- rep(participants_gr, each = nrow(Session2_gram_data) / length(participants_gr))
Session2_violation_interest_data$Participant <- rep(participants_violint, each = nrow(Session2_violation_interest_data) / length(participants_violint))
Session2_ancillary_violation_data$Participant <- rep(participants_ancvil, each = nrow(Session2_ancillary_violation_data) / length(participants_ancvil))
# adding condition column to the dataframes
Session2_gram_data$Condition <- 'Grammatical'
Session2_violation_interest_data$Condition <- 'Violation_of_Interest'
Session2_ancillary_violation_data$Condition <- 'Ancillary_Violation'
# Combine all data frames into one
Session2_combined_data <- rbind(Session2_gram_data, Session2_violation_interest_data, Session2_ancillary_violation_data)
#dividing the electrodes into brain regions
# Define the mapping of electrodes to regions
electrode_to_region <- c(
"T7" = "left medial",
"C3" = "left medial",
"CP5" = "left medial",
"T8" = "right medial",
"C4" = "right medial",
"CP6" = "right medial",
"Fp1" = "left anterior",
"F3" = "left anterior",
"F7" = "left anterior",
"FT9" = "left anterior",
"FC5" = "left anterior",
"Fp2" = "right anterior",
"F4" = "right anterior",
"F8" = "right anterior",
"FT10" = "right anterior",
"FC6" = "right anterior",
"P7" = "left posterior",
"P3" = "left posterior",
"O1" = "left posterior",
"P8" = "right posterior",
"P4" = "right posterior",
"O2" = "right posterior",
"Fz" = "midline anterior",
"FC1" = "midline anterior",
"FC2" = "midline anterior",
"Cz" = "midline medial",
"CP1" = "midline medial",
"CP2" = "midline medial",
"Pz" = "midline posterior",
"Oz" = "midline posterior"
)
# Add Region column based on electrode_to_region mapping
Session2_combined_data <- Session2_combined_data %>%
mutate(Region = electrode_to_region[Electrode])
# Melt the combined data frame to convert it from wide to long format
Session2_melted_data_dirty <- melt(Session2_combined_data, id.vars = c('Participant', 'Electrode', 'Condition', 'Region'), variable.name = 'Time', value.name = 'Activation')
# Convert the 'Time' column to numeric
Session2_melted_data_dirty$Time <- as.numeric(as.character(Session2_melted_data_dirty$Time))
# Add the Session column
Session2_melted_data_dirty$Session <- 'Session 2'
# View the resulting melted data
View(Session2_melted_data_dirty)
# Removing rows where any column has NA or NaN values
Session2_melted_data <- Session2_melted_data_dirty %>%
filter(complete.cases(.))  # Removes rows with NA values in any column
# Alternatively, if you want to remove rows with NaN values specifically
Session2_melted_data <- Session2_melted_data_dirty %>%
filter(!is.nan(Activation)) %>%
filter(complete.cases(.))  # Ensure no NA values are left
# View the cleaned data
View(Session2_melted_data)
rows_with_na_nan <- Session2_melted_data %>%
filter(is.na(Activation) | is.nan(Activation))
print(rows_with_na_nan)
# Display rows with NA or NaN in any column
rows_with_any_na_nan <- Session2_melted_data %>%
filter(if_any(everything(), ~ is.na(.) | is.nan(.)))
print(rows_with_any_na_nan)
library(plyr)
library(reshape2)
library(magrittr)
library(dplyr)
library(ggplot2)
path <- "EEG/data/Session 2/Export/"
#getting the list of files
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = path, full.names = TRUE)
#Checking the file paths
print(Session2_gram_files)
print(Session2_violation_interest)
print(Session2_ancillary_violation)
# Constructing lists of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
library(plyr)
library(reshape2)
library(magrittr)
library(dplyr)
library(ggplot2)
path <- "EEG/data/Session 2/Export/"
#getting the list of files
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = path, full.names = TRUE)
#Checking the file paths
print(Session2_gram_files)
print(Session2_violation_interest)
print(Session2_ancillary_violation)
# Constructing lists of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
library(plyr)
library(reshape2)
library(magrittr)
library(dplyr)
library(ggplot2)
path <- "EEG/data/Session 2/Export/"
#getting the list of files
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = path, full.names = TRUE)
#Checking the file paths
print(Session2_gram_files)
print(Session2_violation_interest)
print(Session2_ancillary_violation)
# Constructing lists of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
library(plyr)
library(reshape2)
library(magrittr)
library(dplyr)
library(ggplot2)
path <- "EEG/data/Session 2/Export/"
path <- "EEG/data/Session 2/Export/"
#getting the list of files
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = path, full.names = TRUE)
#Checking the file paths
print(Session2_gram_files)
print(Session2_violation_interest)
print(Session2_ancillary_violation)
# Constructing lists of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
View(Session2_ancillary_violation_list)
library(plyr)
library(reshape2)
library(magrittr)
library(dplyr)
library(ggplot2)
path <- "EEG/data/Session 2/Export/"
#getting the list of files
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = path, full.names = TRUE)
#Checking the file paths
print(Session2_gram_files)
print(Session2_violation_interest)
print(Session2_ancillary_violation)
# Constructing lists of data
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
View(Session2_ancillary_violation_list)
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
View(Session2_ancillary_violation_list)
# converting the lists into data frames
Session2_gram_data = ldply(Session2_gram_list, data.frame)
Session2_violation_interest_data = ldply(Session2_violation_interest_list, data.frame)
Session2_ancillary_violation_data = ldply (Session2_ancillary_violation_list, data.frame)
# the time column is organised in miliseconds, from -100 to 1098, and counted every 2 ms
seq = seq(-100, 1098, 2)
# the electrode column is formulated as a vector of electrode names that correspond to the time interval sequence
names(Session2_gram_data) = c('Electrode', seq)
names(Session2_violation_interest_data) = c('Electrode', seq)
names(Session2_ancillary_violation_data) = c ('Electrode', seq)
# working on the participants' name column
#removing the path from the participants' names so their column can be named succintly
file_names_gram <- basename(Session2_gram_files)
files_names_violation_interest <- basename(Session2_violation_interest)
files_names_ancillary_violation <- basename(Session2_ancillary_violation)
#Extract participant numbers
participants_gr <- sub("_.*", "", file_names_gram)
participants_violint = sub("_.*", "", files_names_violation_interest)
participants_ancvil = sub("_.*", "", files_names_ancillary_violation)
# adding participant columns to the data frames
Session2_gram_data$Participant <- rep(participants_gr, each = nrow(Session2_gram_data) / length(participants_gr))
Session2_violation_interest_data$Participant <- rep(participants_violint, each = nrow(Session2_violation_interest_data) / length(participants_violint))
Session2_ancillary_violation_data$Participant <- rep(participants_ancvil, each = nrow(Session2_ancillary_violation_data) / length(participants_ancvil))
# adding condition column to the dataframes
Session2_gram_data$Condition <- 'Grammatical'
Session2_violation_interest_data$Condition <- 'Violation of Interest'
Session2_ancillary_violation_data$Condition <- 'Ancillary Violation'
# Combine all data frames into one
Session2_combined_data <- rbind(Session2_gram_data, Session2_violation_interest_data, Session2_ancillary_violation_data)
#dividing the electrodes into brain regions
# Define the mapping of electrodes to regions
electrode_to_region <- c(
"T7" = "left medial",
"C3" = "left medial",
"CP5" = "left medial",
"T8" = "right medial",
"C4" = "right medial",
"CP6" = "right medial",
"Fp1" = "left anterior",
"F3" = "left anterior",
"F7" = "left anterior",
"FT9" = "left anterior",
"FC5" = "left anterior",
"Fp2" = "right anterior",
"F4" = "right anterior",
"F8" = "right anterior",
"FT10" = "right anterior",
"FC6" = "right anterior",
"P7" = "left posterior",
"P3" = "left posterior",
"O1" = "left posterior",
"P8" = "right posterior",
"P4" = "right posterior",
"O2" = "right posterior",
"Fz" = "midline anterior",
"FC1" = "midline anterior",
"FC2" = "midline anterior",
"Cz" = "midline medial",
"CP1" = "midline medial",
"CP2" = "midline medial",
"Pz" = "midline posterior",
"Oz" = "midline posterior"
)
# Add Region column based on electrode_to_region mapping
Session2_combined_data <- Session2_combined_data %>%
mutate(Region = electrode_to_region[Electrode])
# Melt the combined data frame to convert it from wide to long format
Session2_melted_data_dirty <- melt(Session2_combined_data, id.vars = c('Participant', 'Electrode', 'Condition', 'Region'), variable.name = 'Time', value.name = 'Activation')
# Convert the 'Time' column to numeric
Session2_melted_data_dirty$Time <- as.numeric(as.character(Session2_melted_data_dirty$Time))
# Add the Session column
Session2_melted_data_dirty$Session <- 'Session 2'
# View the resulting melted data
View(Session2_melted_data_dirty)
# Removing rows where any column has NA or NaN values
Session2_melted_data <- Session2_melted_data_dirty %>%
filter(complete.cases(.))  # Removes rows with NA values in any column
# Alternatively, if you want to remove rows with NaN values specifically
Session2_melted_data <- Session2_melted_data_dirty %>%
filter(!is.nan(Activation)) %>%
filter(complete.cases(.))  # Ensure no NA values are left
# View the cleaned data
View(Session2_melted_data)
# making sure that no Nas or NaNs have been introduced by coercion
rows_with_any_na_nan <- Session2_melted_data %>%
filter(if_any(everything(), ~ is.na(.) | is.nan(.)))
print(rows_with_any_na_nan)
# Example of running ANOVA on a more meaningful subset
# Subsetting data for a specific time range and conditions
subset_data_large <- Session2_melted_data %>%
filter(Time >= 0 & Time <= 500) %>%
filter(Condition %in% c("Grammatical", "Violation of Interest", "Ancillary Violation"))
# Running ANOVA on the larger subset
anova_result_large <- aov(Activation ~ Condition + Time + Error(Participant/Condition), data = subset_data_large)
# Inspecting the subset data to check for any NA/NaN/Inf values
subset_data_large <- subset_data_large %>%
filter(!is.na(Activation) & !is.nan(Activation) & is.finite(Activation))
# Check the subset data after removing problematic values
print(head(subset_data_large, 10))
# Running ANOVA on the cleaned subset
anova_result_large <- aov(Activation ~ Condition + Time + Error(Participant/Condition), data = subset_data_large)
summary(anova_result_large)
# Check levels of the factors
levels(subset_data_large$Condition)
levels(subset_data_large$Time)
levels(subset_data_large$Participant)
# Ensuring that the factors have at least two levels
subset_data_large <- subset_data_large %>%
filter(Condition %in% c("Grammatical", "Violation of Interest", "Ancillary Violation")) %>%
filter(Time >= 0 & Time <= 500)
# Check the number of levels for each factor again
print(unique(subset_data_large$Condition))
# Check levels of the factors
levels(Session2_melted_dat$Condition)
# Check levels of the factors
levels(Session2_melted_data$Condition)
levels(Session2_melted_data$Time)
# Ensure 'Condition' and 'Participant' are factors
subset_data_large$Condition <- as.factor(Session2_melted_data$Condition)
# Check levels of the factors
levels(Session2_melted_data$Condition)
