Session2_tbt_violation_interest <- list.files(pattern = "*^[0-9]_+trialbytrial_S1_S102.txt",
path = Session2pathtbt, full.names = TRUE)
Session2_tbt_ancillary_violation <- list.files(pattern = "*^[0-9]_+trialbytrial_S1_S103.txt",
path = Session2pathtbt, full.names = TRUE)
# Constructing lists of data, one for each condition
Session2_tbt_gram_list = lapply(1:length(Session2_tbt_gram_files),function(x) {
read.table(Session2_tbt_gram_files[x], header=FALSE) } )
View(Session2_tbt_gram_list)
list(Session2_tbt_gram_files)
# Constructing lists of data, one for each condition
Session2_tbt_gram_list = lapply(1:length(Session2_tbt_gram_files),function(x) {
read.table(Session2_tbt_gram_files[x], header=FALSE) } )
View(Session2_tbt_gram_list)
Session2_tbt_violation_interest_list = lapply(1:length(Session2_tbt_violation_interest),
function(x) {
read.table(Session2_tbt_violation_interest[x], header=FALSE) } )
Session2_tbt_ancillary_violation_list = lapply(1:length(Session2_tbt_ancillary_violation),
function(x) {
read.table(Session2_tbt_ancillary_violation [x], header=FALSE) } )
# converting the lists into data frames
Session2_tbt_gram_data = ldply(Session2_tbt_gram_list, data.frame)
Session2_tbt_violation_interest_data = ldply(Session2_tbt_violation_interest_list,
data.frame)
Session2_tbt_ancillary_violation_data = ldply (Session2_tbt_ancillary_violation_list,
data.frame)
# the Electrode column is formulated as a vector of electrode names that
#correspond to the time interval sequence
names(Session2_tbt_gram_data) = c('Electrode', seq)
names(Session2_tbt_violation_interest_data) = c('Electrode', seq)
names(Session2_tbt_ancillary_violation_data) = c ('Electrode', seq)
#participants' name column
#removing the path from the participants' file names
file_names_tbt_gram <- basename(Session2_tbt_gram_files)
files_names_tbt_violation_interest <- basename(Session2_tbt_violation_interest)
files_names_tbt_ancillary_violation <- basename(Session2_tbt_ancillary_violation)
#Extracting the participant numbers from the file name
participants_tbt_gr <- sub("_.*", "", file_names_tbt_gram)
participants_tbt_violint = sub("_.*", "", files_names_tbt_violation_interest)
participants_tbt_ancvil = sub("_.*", "", files_names_tbt_ancillary_violation)
# adding a "Participant_number" column to the data frames
Session2_tbt_gram_data$Participant_number <- rep(participants_tbt_gr, each =
nrow(Session2_tbt_gram_data) / length(participants_tbt_gr))
Session2_tbt_violation_interest_data$Participant_number <- rep(participants_tbt_violint,
each = nrow(Session2_tbt_violation_interest_data) / length(participants_tbt_violint))
Session2_tbt_ancillary_violation_data$Participant_number <- rep(participants_tbt_ancvil,
each = nrow(Session2_tbt_ancillary_violation_data) / length(participants_tbt_ancvil))
# adding a Grammaticality column to the data frames
Session2_tbt_gram_data$Grammaticality <- 'Grammatical'
Session2_tbt_violation_interest_data$Grammaticality <- 'Violation of Interest'
Session2_tbt_ancillary_violation_data$Grammaticality <- 'Ancillary Violation'
# Combine all data frames into one
Session2_tbt_combined_data <- rbind(Session2_tbt_gram_data,
Session2_tbt_violation_interest_data, Session2_tbt_ancillary_violation_data)
#dividing the electrodes into brain regions
# Define the mapping of electrodes to regions
electrode_to_region <- c(
"T7" = "left medial",
"C3" = "left medial",
"CP5" = "left medial",
"T8" = "right medial",
"C4" = "right medial",
"CP6" = "right medial",
"Fp1" = "left anterior",
"F3" = "left anterior",
"F7" = "left anterior",
"FT9" = "left anterior",
"FC5" = "left anterior",
"Fp2" = "right anterior",
"F4" = "right anterior",
"F8" = "right anterior",
"FT10" = "right anterior",
"FC6" = "right anterior",
"P7" = "left posterior",
"P3" = "left posterior",
"O1" = "left posterior",
"P8" = "right posterior",
"P4" = "right posterior",
"O2" = "right posterior",
"Fz" = "midline anterior",
"FC1" = "midline anterior",
"FC2" = "midline anterior",
"Cz" = "midline medial",
"CP1" = "midline medial",
"CP2" = "midline medial",
"Pz" = "midline posterior",
"Oz" = "midline posterior"
)
# Creating the 'Region' column
Session2_tbt_combined_data$Region <- ifelse(
Session2_tbt_combined_data$Electrode %in% names(electrode_to_region),
electrode_to_region[match(Session2_tbt_combined_data$Electrode, names(electrode_to_region))],
NA_character_
)
View(Session2_tbt_combined_data)
# Melting the combined data frame to convert it from wide to long format
Session2_melted_data_tbt_dirty <- melt(Session2_tbt_combined_data, id.vars =
c('Participant_number', 'Electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
# Converting the 'Time' column to numeric
Session2_tbt_melted_data_dirty$Time <- as.numeric (as.character
(Session2_tbt_melted_data_dirty$Time))
# Melting the combined data frame to convert it from wide to long format
Session2_tbt_melted_data_dirty <- melt(Session2_tbt_combined_data, id.vars =
c('Participant_number', 'Electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
# Converting the 'Time' column to numeric
Session2_tbt_melted_data_dirty$Time <- as.numeric (as.character
(Session2_tbt_melted_data_dirty$Time))
# Adding a Session column
Session2_tbt_melted_data_dirty$Session <- 'Session 2'
# Removing rows where any column has NA or NaN values
Session2_tbt_melted_data <- Session2_tbt_melted_data_dirty %>%
filter(complete.cases(.))
View(Session2_tbt_melted_data)
seq = seq(-100, 1098, 2)
#dividing the electrodes into brain regions
# Define the mapping of electrodes to regions
electrode_to_region <- c(
"T7" = "left medial",
"C3" = "left medial",
"CP5" = "left medial",
"T8" = "right medial",
"C4" = "right medial",
"CP6" = "right medial",
"Fp1" = "left anterior",
"F3" = "left anterior",
"F7" = "left anterior",
"FT9" = "left anterior",
"FC5" = "left anterior",
"Fp2" = "right anterior",
"F4" = "right anterior",
"F8" = "right anterior",
"FT10" = "right anterior",
"FC6" = "right anterior",
"P7" = "left posterior",
"P3" = "left posterior",
"O1" = "left posterior",
"P8" = "right posterior",
"P4" = "right posterior",
"O2" = "right posterior",
"Fz" = "midline anterior",
"FC1" = "midline anterior",
"FC2" = "midline anterior",
"Cz" = "midline medial",
"CP1" = "midline medial",
"CP2" = "midline medial",
"Pz" = "midline posterior",
"Oz" = "midline posterior"
)
# Creating the 'Region' column
Session2_tbt_combined_data$Region <- ifelse(
Session2_tbt_combined_data$Electrode %in% names(electrode_to_region),
electrode_to_region[match(Session2_tbt_combined_data$Electrode, names(electrode_to_region))],
NA_character_
)
View(Session2_tbt_combined_data)
# Melting the combined data frame to convert it from wide to long format
Session2_tbt_melted_data_dirty <- melt(Session2_tbt_combined_data, id.vars =
c('Participant_number', 'Electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
# Converting the 'Time' column to numeric
Session2_tbt_melted_data_dirty$Time <- as.numeric (as.character
(Session2_tbt_melted_data_dirty$Time))
# Adding a Session column
Session2_tbt_melted_data_dirty$Session <- 'Session 2'
# Removing rows where any column has NA or NaN values
Session2_tbt_melted_data <- Session2_tbt_melted_data_dirty %>%
filter(complete.cases(.))
View(Session2_tbt_melted_data)
View(Session2_tbt_combined_data)
seq = seq(-100, 1098, 2)
View(Session2_tbt_combined_data)
#dividing the electrodes into brain regions
# Define the mapping of electrodes to regions
electrode_to_region <- c(
"T7" = "left medial",
"C3" = "left medial",
"CP5" = "left medial",
"T8" = "right medial",
"C4" = "right medial",
"CP6" = "right medial",
"Fp1" = "left anterior",
"F3" = "left anterior",
"F7" = "left anterior",
"FT9" = "left anterior",
"FC5" = "left anterior",
"Fp2" = "right anterior",
"F4" = "right anterior",
"F8" = "right anterior",
"FT10" = "right anterior",
"FC6" = "right anterior",
"P7" = "left posterior",
"P3" = "left posterior",
"O1" = "left posterior",
"P8" = "right posterior",
"P4" = "right posterior",
"O2" = "right posterior",
"Fz" = "midline anterior",
"FC1" = "midline anterior",
"FC2" = "midline anterior",
"Cz" = "midline medial",
"CP1" = "midline medial",
"CP2" = "midline medial",
"Pz" = "midline posterior",
"Oz" = "midline posterior"
)
# Creating the 'Region' column
Session2_tbt_combined_data$Region <- ifelse(
Session2_tbt_combined_data$Electrode %in% names(electrode_to_region),
electrode_to_region[match(Session2_tbt_combined_data$Electrode, names(electrode_to_region))],
NA_character_
)
View(Session2_tbt_combined_data)
# Melting the combined data frame to convert it from wide to long format
Session2_tbt_melted_data_dirty <- melt(Session2_tbt_combined_data, id.vars =
c('Participant_number', 'Electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
# Converting the 'Time' column to numeric
Session2_tbt_melted_data_dirty$Time <- as.numeric (as.character
(Session2_tbt_melted_data_dirty$Time))
# Adding a Session column
Session2_tbt_melted_data_dirty$Session <- 'Session 2'
# Removing rows where any column has NA or NaN values
Session2_tbt_melted_data <- Session2_tbt_melted_data_dirty %>%
filter(complete.cases(.))
View(Session2_tbt_melted_data)
Session2_N200_data_frame <- read.csv("EEG/data/Session 2/Session2_N200_data_frame.csv", header = TRUE)
# Ensure the Time column is a factor
S3_N200_df$Time <- factor(S3_N200_df$Time)
# Perform ANOVA with Electrode and Time as factors
anova_result <- aov(Activation ~ Electrode , data = Session2_N200_data_frame)
# Perform one-way ANOVA with Electrode as the factor
anova_result <- aov(Activation ~ Electrode, data = Session2_N200_data_frame)
# Check for missing values in Activation
sum(is.na(Session2_N200_data_frame$Activation))
# Check for non-numeric values
unique(Session2_N200_data_frame$Activation)
# Convert Activation to numeric (if necessary)
Session2_N200_data_frame$Activation <- as.numeric(Session2_N200_data_frame$Activation)
# Perform one-way ANOVA with Electrode as the factor
anova_result <- aov(Activation ~ Electrode, data = Session2_N200_data_frame)
# Perform one-way ANOVA with Electrode as the factor
anova_result <- aov(Activation ~ Electrode, data = Session2_N200_data_frame)
# Remove rows with missing values in Activation
Session2_N200_data_frame <- na.omit(Session2_N200_data_frame)
# Ensure Activation is numeric
Session2_N200_data_frame$Activation <- as.numeric(Session2_N200_data_frame$Activation)
# Ensure Electrode is a factor
Session2_N200_data_frame$Electrode <- as.factor(Session2_N200_data_frame$Electrode)
# Perform one-way ANOVA with Electrode as the factor
anova_result <- aov(Activation ~ Electrode, data = Session2_N200_data_frame)
# Summary of the ANOVA result
summary(anova_result)
# Perform one-way ANOVA with Electrode as the factor
anova_result <- aov(Activation ~ Region, data = Session2_N200_data_frame)
# Ensure Electrode is a factor
Session2_N200_data_frame$Region <- as.factor(Session2_N200_data_frame$Electrode)
# Perform one-way ANOVA with Electrode as the factor
anova_result <- aov(Activation ~ Region, data = Session2_N200_data_frame)
# Check the levels of the Electrode factor
levels(Session2_N200_data_frame$Region)
View(Session2_N200_data_frame)
#ANOVAs for Session 2
Session2_data_frame <- read.csv("EEG/data/Session 2/Session2_data_frame.csv", header = TRUE)
Session2_N200_data_frame <- read.csv("EEG/data/Session 2/Session2_N200_data_frame.csv", header = TRUE)
Session2_P300_data_frame <- read.csv("EEG/data/Session 2/Session2_P300_data_frame.csv", header = TRUE)
Session2_P600_data_frame <- read.csv("EEG/data/Session 2/Session2_P600_data_frame.csv", header = TRUE)
#setting the columns Time, Region, Grammaticality and Participant_number as factors
#in order to run ANOVAs
#Session3_melted_data$Time <- as.factor(Session4_melted_data_S1$Time)
Session2_N200_data_frame$Region <- as.factor(Session2_N200_data_frame$Region)
levels(Session2_N200_data_frame$Region)
Session2_N200_data_frame$Grammaticality <- as.factor(Session2_N200_data_frame$Grammaticality)
levels(Session2_N200_data_frame$Grammaticality)
Session2_N200_data_frame$Participant_number <- as.factor(Session2_N200_data_frame$Participant_number)
levels(Session2_N200_data_frame$Participant_number )
# Perform one-way ANOVA with Electrode as the factor
anova_result <- aov(Activation ~ Region, data = Session2_N200_data_frame)
# Summary of the ANOVA result
summary(anova_result)
# Perform one-way ANOVA with Electrode as the factor
anova_result <- aov(Activation ~ Region, data = Session2_N200_data_frame)
sum(is.na(Session2_N200_data_frame$Activation))
sum(is.nan(Session2_N200_data_frame$Activation))
sum(is.infinite(Session2_N200_data_frame$Activation))
unique(Session2_N200_data_frame$Activation)
# Convert Activation to numeric (if necessary)
Session2_N200_data_frame$Activation <- as.numeric(Session2_N200_data_frame$Activation)
# Perform one-way ANOVA with Electrode as the factor
anova_result <- aov(Activation ~ Region, data = Session2_N200_data_frame)
# averaging all rows and columns so that only one value per region
# Calculating column-wise means excluding NA
# Calculating the overall mean of column means
# Ensure Activation is numeric
Session2_N200_data_frame$Activation <- as.numeric(Session2_N200_data_frame$Activation)
# Ensure Region is a factor
Session2_N200_data_frame$Region <- as.factor(Session2_N200_data_frame$Region)
# Perform one-way ANOVA with Electrode as the factor
anova_result <- aov(Activation ~ Region, data = Session2_N200_data_frame)
# Ensure Activation is numeric
Session2_N200_data_frame$Activation <- as.numeric(Session2_N200_data_frame$Activation)
# Ensure Region is a factor
Session2_N200_data_frame$Region <- as.factor(Session2_N200_data_frame$Region)
# Perform one-way ANOVA with Electrode as the factor
anova_result <- aov(Activation ~ Region, data = Session2_N200_data_frame)
# Load necessary library
library(ez)
install.packages(ez)
# Install lme4 package if not already installed
install.packages("lme4")
# Load the package
library(lme4)
# Fit a mixed-effects model
model <- lmer(Activation ~ Region + (1 | Participant), data = Session2_N200_data_frame)
View(Session2_N200_data_frame)
# Ensure Activation is numeric
Session2_N200_data_frame$Activation <- as.numeric(Session2_N200_data_frame$Activation)
# Ensure Region is a factor
Session2_N200_data_frame$Region <- as.factor(Session2_N200_data_frame$Region)
# Perform one-way ANOVA with Electrode as the factor
anova_result <- aov(Activation ~ Region, data = Session2_N200_data_frame)
# Load necessary library
library(dplyr)
# Aggregate data to get mean Activation per Region per Participant
aggregated_data <- Session2_N200_data_frame %>%
group_by(Participant, Region) %>%
summarize(Mean_Activation = mean(Activation, na.rm = TRUE))
# View the aggregated data
head(aggregated_data)
colnames(Session2_N200_data_frame)
# Aggregate data to get mean Activation per Region per Participant
aggregated_data <- Session2_N200_data_frame %>%
group_by(Participant_ID, Region) %>%
summarize(Mean_Activation = mean(Activation, na.rm = TRUE))
# View the aggregated data
head(aggregated_data)
# Check for missing values in the columns used for aggregation
sum(is.na(Session2_N200_data_frame$Participant_ID))
sum(is.na(Session2_N200_data_frame$Region))
# Summarize the data to find potential issues
summary(Session2_N200_data_frame)
cleaned_data <- Session2_N200_data_frame %>%
filter(!is.na(Activation) & !is.nan(Activation))
# Check if the issue is resolved
aggregated_data <- cleaned_data %>%
group_by(Participant_ID, Region) %>%
summarize(Mean_Activation = mean(Activation, na.rm = TRUE))
head(aggregated_data)
View(aggregated_data)
# Check the number of rows before and after cleaning
nrow(Session2_N200_data_frame)
nrow(cleaned_data)
# Verify that cleaning removed `NA` and `NaN`
sum(is.na(cleaned_data$Activation))
sum(is.nan(cleaned_data$Activation))
# Replace NA and NaN values in Activation with 1
Session2_N200_data_frame <- Session2_N200_data_frame %>%
mutate(Activation = ifelse(is.na(Activation) | is.nan(Activation), 1, Activation))
# Aggregate data to get mean Activation per Region per Participant
aggregated_data <- Session2_N200_data_frame %>%
group_by(Participant_ID, Region) %>%
summarize(Mean_Activation = mean(Activation, na.rm = TRUE), .groups = 'drop')
# View the aggregated data
head(aggregated_data)
View(aggregated_data)
Session2_N200_data_frame <- read.csv("EEG/data/Session 2/Session2_N200_data_frame.csv", header = TRUE)
View(Session2_N200_data_frame)
Session2_N200_data_frame <- read.csv("EEG/data/Session 2/Session2_N200_data_frame.csv", header = TRUE)
View(Session2_N200_data_frame)
Session2_N200_data_frame$Region <- as.factor(Session2_N200_data_frame$Region)
levels(Session2_N200_data_frame$Region)
Session2_N200_data_frame$Grammaticality <- as.factor(Session2_N200_data_frame$Grammaticality)
levels(Session2_N200_data_frame$Grammaticality)
Session2_N200_data_frame$Participant_number <- as.factor(Session2_N200_data_frame$Participant_number)
levels(Session2_N200_data_frame$Participant_number)
# Convert Activation to numeric (if necessary)
Session2_N200_data_frame$Activation <- as.numeric(Session2_N200_data_frame$Activation)
# Check which rows are causing the problem
non_numeric_rows <- Session2_N200_data_frame[is.na(as.numeric(Session2_N200_data_frame$Activation)), ]
non_numeric_rows
# Load the Background data CSV file
Background_data <- read.csv("Background/Background_data.csv", header = TRUE)
library(tidyverse)
library(reshape2)
library(janitor)
library(plyr)
#session2, remove participants 2 and 7 from anovas
Session2path <- "EEG/data/Session 2/Export/"
#creating patterns to import the files and recognise them as distinct conditions
# the final number in the file name indicates the Grammaticality of the trial
#files that end in:
# 101: the trial was grammatical
# 102: the trial presented a violation of interest
# 103: the trial presented an ancillary violation
#Session 2 investigates Gender agreement, indicated by the marker S1
Session2_gram_files <- list.files(pattern = "*^[0-9]+_S1.S101.txt",
path = Session2path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*^[0-9]+_S1_S102.txt",
path = Session2path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*^[0-9]+_S1_S103.txt",
path = Session2path, full.names = TRUE)
# Constructing lists of data, one for each condition
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),
function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),
function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
# converting the lists into data frames
Session2_gram_data = ldply(Session2_gram_list, data.frame)
Session2_violation_interest_data = ldply(Session2_violation_interest_list,
data.frame)
Session2_ancillary_violation_data = ldply (Session2_ancillary_violation_list,
data.frame)
# time during the recording is organised in milliseconds, from -100 to 1098,
#and recorded with 2 ms intervals
seq = seq(-100, 1098, 2)
# the Electrode column is formulated as a vector of electrode names that
#correspond to the time interval sequence
names(Session2_gram_data) = c('Electrode', seq)
names(Session2_violation_interest_data) = c('Electrode', seq)
names(Session2_ancillary_violation_data) = c ('Electrode', seq)
#participants' name column
#removing the path from the participants' file names
file_names_gram <- basename(Session2_gram_files)
files_names_violation_interest <- basename(Session2_violation_interest)
files_names_ancillary_violation <- basename(Session2_ancillary_violation)
#Extracting the participant numbers from the file name
participants_gr <- sub("_.*", "", file_names_gram)
participants_violint = sub("_.*", "", files_names_violation_interest)
participants_ancvil = sub("_.*", "", files_names_ancillary_violation)
# adding a "Participant_number" column to the data frames
Session2_gram_data$Participant_number <- rep(participants_gr, each =
nrow(Session2_gram_data) / length(participants_gr))
Session2_violation_interest_data$Participant_number <- rep(participants_violint,
each = nrow(Session2_violation_interest_data) / length(participants_violint))
Session2_ancillary_violation_data$Participant_number <- rep(participants_ancvil,
each = nrow(Session2_ancillary_violation_data) / length(participants_ancvil))
# adding a Grammaticality column to the data frames
Session2_gram_data$Grammaticality <- 'Grammatical'
Session2_violation_interest_data$Grammaticality <- 'Violation of Interest'
Session2_ancillary_violation_data$Grammaticality <- 'Ancillary Violation'
# Combine all data frames into one
Session2_combined_data <- rbind(Session2_gram_data,
Session2_violation_interest_data, Session2_ancillary_violation_data)
#dividing the electrodes into brain regions
# Define the mapping of electrodes to regions
electrode_to_region <- c(
"T7" = "left medial",
"C3" = "left medial",
"CP5" = "left medial",
"T8" = "right medial",
"C4" = "right medial",
"CP6" = "right medial",
"Fp1" = "left anterior",
"F3" = "left anterior",
"F7" = "left anterior",
"FT9" = "left anterior",
"FC5" = "left anterior",
"Fp2" = "right anterior",
"F4" = "right anterior",
"F8" = "right anterior",
"FT10" = "right anterior",
"FC6" = "right anterior",
"P7" = "left posterior",
"P3" = "left posterior",
"O1" = "left posterior",
"P8" = "right posterior",
"P4" = "right posterior",
"O2" = "right posterior",
"Fz" = "midline anterior",
"FC1" = "midline anterior",
"FC2" = "midline anterior",
"Cz" = "midline medial",
"CP1" = "midline medial",
"CP2" = "midline medial",
"Pz" = "midline posterior",
"Oz" = "midline posterior"
)
# Creating the 'Region' column
Session2_combined_data$Region <- ifelse(
Session2_combined_data$Electrode %in% names(electrode_to_region),
electrode_to_region[match(Session2_combined_data$Electrode, names(electrode_to_region))],
NA_character_
)
# Melting the combined data frame to convert it from wide to long format
Session2_melted_data_dirty <- melt(Session2_combined_data, id.vars =
c('Participant_number', 'Electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
# Converting the 'Time' column to numeric
Session2_melted_data_dirty$Time <- as.numeric (as.character
(Session2_melted_data_dirty$Time))
# Adding a Session column
Session2_melted_data_dirty$Session <- 'Session 2'
# Removing rows where any column has NA or NaN values
Session2_melted_data <- Session2_melted_data_dirty %>%
filter(complete.cases(.))
Background_data$Participant_number <- as.character(Background_data$Participant_number)
Session2_Background <- full_join(Background_data, Session2_melted_data,
by = "Participant_number",
relationship = "many-to-many")
#setting the columns Time, Region, Grammaticality and Participant_number as factors
#in order to run ANOVAs later
Session2_melted_data$Region <- as.factor(Session2_melted_data$Region)
Session2_melted_data$Grammaticality <- as.factor(Session2_melted_data$Grammaticality)
Session2_melted_data$Participant_number <- as.factor(Session2_melted_data$Participant_number)
# Viewing and saving combined data frame
View(Session2_Background)
write.csv(Session2_Background, "EEG/data/Session 2/Session2_data_frame.csv",
row.names = FALSE)
