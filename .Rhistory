# Add Region column based on electrode_to_region mapping
Session2_combined_data <- Session2_combined_data %>%
mutate(Region = electrode_to_region[Electrode])
library(tidyverse)
library(janitor)
library(plyr)
library(reshape2)
library(magrittr)
library(dplyr)
library(ggplot2)
Session2path <- "EEG/data/Session 2/Export/"
#creating patterns to import the files and recognise them as distinct conditions
# the final number in the file name indicates the Grammaticality of the trial
#files that end in:
# 101: the trial was grammatical
# 102: the trial presented a violation of interest
# 103: the trial presented an ancillary violation
#Session 2 investigates Gender agreement, indicated by the marker S1
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = Session2path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = Session2path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = Session2path, full.names = TRUE)
# Constructing lists of data, one for each condition
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),
function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),
function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
# converting the lists into data frames
Session2_gram_data = ldply(Session2_gram_list, data.frame)
Session2_violation_interest_data = ldply(Session2_violation_interest_list,
data.frame)
Session2_ancillary_violation_data = ldply (Session2_ancillary_violation_list,
data.frame)
# time during the recording is organised in milliseconds, from -100 to 1098,
#and recorded with 2 ms intervals
seq = seq(-100, 1098, 2)
# the electrode column is formulated as a vector of electrode names that
#correspond to the time interval sequence
names(Session2_gram_data) = c('Electrode', seq)
names(Session2_violation_interest_data) = c('Electrode', seq)
names(Session2_ancillary_violation_data) = c ('Electrode', seq)
# working on the participants' name column
#removing the path from the participants' file names
file_names_gram <- basename(Session2_gram_files)
files_names_violation_interest <- basename(Session2_violation_interest)
files_names_ancillary_violation <- basename(Session2_ancillary_violation)
#Extracting the participant numbers from the file name
participants_gr <- sub("_.*", "", file_names_gram)
participants_violint = sub("_.*", "", files_names_violation_interest)
participants_ancvil = sub("_.*", "", files_names_ancillary_violation)
# adding a "Participant_number" column to the data frames
Session2_gram_data$Participant_number <- rep(participants_gr, each =
nrow(Session2_gram_data) / length(participants_gr))
Session2_violation_interest_data$Participant_number <- rep(participants_violint,
each = nrow(Session2_violation_interest_data) / length(participants_violint))
Session2_ancillary_violation_data$Participant_number <- rep(participants_ancvil,
each = nrow(Session2_ancillary_violation_data) / length(participants_ancvil))
# adding a Grammaticality column to the data frames
Session2_gram_data$Grammaticality <- 'Grammatical'
Session2_violation_interest_data$Grammaticality <- 'Violation of Interest'
Session2_ancillary_violation_data$Grammaticality <- 'Ancillary Violation'
# Combine all data frames into one
Session2_combined_data <- rbind(Session2_gram_data,
Session2_violation_interest_data, Session2_ancillary_violation_data)
View(Session2_combined_data)
#dividing the electrodes into brain regions
# Define the mapping of electrodes to regions
electrode_to_region <- c(
"T7" = "left medial",
"C3" = "left medial",
"CP5" = "left medial",
"T8" = "right medial",
"C4" = "right medial",
"CP6" = "right medial",
"Fp1" = "left anterior",
"F3" = "left anterior",
"F7" = "left anterior",
"FT9" = "left anterior",
"FC5" = "left anterior",
"Fp2" = "right anterior",
"F4" = "right anterior",
"F8" = "right anterior",
"FT10" = "right anterior",
"FC6" = "right anterior",
"P7" = "left posterior",
"P3" = "left posterior",
"O1" = "left posterior",
"P8" = "right posterior",
"P4" = "right posterior",
"O2" = "right posterior",
"Fz" = "midline anterior",
"FC1" = "midline anterior",
"FC2" = "midline anterior",
"Cz" = "midline medial",
"CP1" = "midline medial",
"CP2" = "midline medial",
"Pz" = "midline posterior",
"Oz" = "midline posterior"
)
# Add a Region column on the data frame based on the electrode_to_region mapping
Session2_combined_data <- Session2_combined_data %>%
mutate(Region = electrode_to_region[Electrode])
rlang::last_trace()
library(tidyverse)
library(janitor)
library(plyr)
library(reshape2)
#session2, remove participants 2 and 7 from anovas
Session2path <- "EEG/data/Session 2/Export/"
#creating patterns to import the files and recognise them as distinct conditions
# the final number in the file name indicates the Grammaticality of the trial
#files that end in:
# 101: the trial was grammatical
# 102: the trial presented a violation of interest
# 103: the trial presented an ancillary violation
#Session 2 investigates Gender agreement, indicated by the marker S1
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = Session2path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = Session2path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = Session2path, full.names = TRUE)
# Constructing lists of data, one for each condition
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),
function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),
function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
# converting the lists into data frames
Session2_gram_data = ldply(Session2_gram_list, data.frame)
Session2_violation_interest_data = ldply(Session2_violation_interest_list,
data.frame)
Session2_ancillary_violation_data = ldply (Session2_ancillary_violation_list,
data.frame)
# time during the recording is organised in milliseconds, from -100 to 1098,
#and recorded with 2 ms intervals
seq = seq(-100, 1098, 2)
# the electrode column is formulated as a vector of electrode names that
#correspond to the time interval sequence
names(Session2_gram_data) = c('Electrode', seq)
names(Session2_violation_interest_data) = c('Electrode', seq)
names(Session2_ancillary_violation_data) = c ('Electrode', seq)
View(Session2_gram_data)
# working on the participants' name column
#removing the path from the participants' file names
file_names_gram <- basename(Session2_gram_files)
files_names_violation_interest <- basename(Session2_violation_interest)
files_names_ancillary_violation <- basename(Session2_ancillary_violation)
#Extracting the participant numbers from the file name
participants_gr <- sub("_.*", "", file_names_gram)
participants_violint = sub("_.*", "", files_names_violation_interest)
participants_ancvil = sub("_.*", "", files_names_ancillary_violation)
# adding a "Participant_number" column to the data frames
Session2_gram_data$Participant_number <- rep(participants_gr, each =
nrow(Session2_gram_data) / length(participants_gr))
Session2_violation_interest_data$Participant_number <- rep(participants_violint,
each = nrow(Session2_violation_interest_data) / length(participants_violint))
Session2_ancillary_violation_data$Participant_number <- rep(participants_ancvil,
each = nrow(Session2_ancillary_violation_data) / length(participants_ancvil))
# adding a Grammaticality column to the data frames
Session2_gram_data$Grammaticality <- 'Grammatical'
Session2_violation_interest_data$Grammaticality <- 'Violation of Interest'
Session2_ancillary_violation_data$Grammaticality <- 'Ancillary Violation'
# Combine all data frames into one
Session2_combined_data <- rbind(Session2_gram_data,
Session2_violation_interest_data, Session2_ancillary_violation_data)
View(Session2_combined_data)
#clean data from NA values
Session2_combined_data <- Session2_combined_data %>%
clean_names()
#dividing the electrodes into brain regions
# Define the mapping of electrodes to regions
electrode_to_region <- c(
"T7" = "left medial",
"C3" = "left medial",
"CP5" = "left medial",
"T8" = "right medial",
"C4" = "right medial",
"CP6" = "right medial",
"Fp1" = "left anterior",
"F3" = "left anterior",
"F7" = "left anterior",
"FT9" = "left anterior",
"FC5" = "left anterior",
"Fp2" = "right anterior",
"F4" = "right anterior",
"F8" = "right anterior",
"FT10" = "right anterior",
"FC6" = "right anterior",
"P7" = "left posterior",
"P3" = "left posterior",
"O1" = "left posterior",
"P8" = "right posterior",
"P4" = "right posterior",
"O2" = "right posterior",
"Fz" = "midline anterior",
"FC1" = "midline anterior",
"FC2" = "midline anterior",
"Cz" = "midline medial",
"CP1" = "midline medial",
"CP2" = "midline medial",
"Pz" = "midline posterior",
"Oz" = "midline posterior"
)
# Add a Region column on the data frame based on the electrode_to_region mapping
Session2_combined_data <- Session2_combined_data %>%
mutate(Region = electrode_to_region[Electrode])
colnames(Session2_combined_data)
head(Session2_combined_data)
# Add a Region column on the data frame based on the electrode_to_region mapping
Session2_combined_data <- Session2_combined_data %>%
mutate(Region = electrode_to_region[electrode])
# Melt the combined data frame to convert it from wide to long format
Session2_melted_data_dirty <- melt(Session2_combined_data, id.vars =
c('Participant_number', 'Electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
# After cleaning names, check column names again
colnames(Session2_combined_data)
# Melt the combined data frame to convert it from wide to long format
Session2_melted_data_dirty <- melt(Session2_combined_data, id.vars =
c('Participant_number', 'electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
# Convert the 'Time' column to numeric
Session2_melted_data_dirty$Time <- as.numeric (as.character
(Session2_melted_data_dirty$Time))
# importing lhq3 script, which will be used to complete the session data frames
source("EEG/analysis/LHQ3 Importation script.R")
# importing lhq3 script, which will be used to complete the session data frames
source("EEG/analysis/1. LHQ3 Importation script.R")
library(tidyverse)
library(janitor)
library(plyr)
library(reshape2)
#session2, remove participants 2 and 7 from anovas
Session2path <- "EEG/data/Session 2/Export/"
#creating patterns to import the files and recognise them as distinct conditions
# the final number in the file name indicates the Grammaticality of the trial
#files that end in:
# 101: the trial was grammatical
# 102: the trial presented a violation of interest
# 103: the trial presented an ancillary violation
#Session 2 investigates Gender agreement, indicated by the marker S1
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = Session2path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = Session2path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = Session2path, full.names = TRUE)
# Constructing lists of data, one for each condition
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),
function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),
function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
# converting the lists into data frames
Session2_gram_data = ldply(Session2_gram_list, data.frame)
Session2_violation_interest_data = ldply(Session2_violation_interest_list,
data.frame)
Session2_ancillary_violation_data = ldply (Session2_ancillary_violation_list,
data.frame)
# time during the recording is organised in milliseconds, from -100 to 1098,
#and recorded with 2 ms intervals
seq = seq(-100, 1098, 2)
# the Electrode column is formulated as a vector of electrode names that
#correspond to the time interval sequence
names(Session2_gram_data) = c('Electrode', seq)
names(Session2_violation_interest_data) = c('Electrode', seq)
names(Session2_ancillary_violation_data) = c ('Electrode', seq)
View(Session2_gram_data)
# working on the participants' name column
#removing the path from the participants' file names
file_names_gram <- basename(Session2_gram_files)
files_names_violation_interest <- basename(Session2_violation_interest)
files_names_ancillary_violation <- basename(Session2_ancillary_violation)
View(Session2_gram_data)
#Extracting the participant numbers from the file name
participants_gr <- sub("_.*", "", file_names_gram)
participants_violint = sub("_.*", "", files_names_violation_interest)
participants_ancvil = sub("_.*", "", files_names_ancillary_violation)
# adding a "Participant_number" column to the data frames
Session2_gram_data$Participant_number <- rep(participants_gr, each =
nrow(Session2_gram_data) / length(participants_gr))
Session2_violation_interest_data$Participant_number <- rep(participants_violint,
each = nrow(Session2_violation_interest_data) / length(participants_violint))
Session2_ancillary_violation_data$Participant_number <- rep(participants_ancvil,
each = nrow(Session2_ancillary_violation_data) / length(participants_ancvil))
# adding a Grammaticality column to the data frames
Session2_gram_data$Grammaticality <- 'Grammatical'
Session2_violation_interest_data$Grammaticality <- 'Violation of Interest'
Session2_ancillary_violation_data$Grammaticality <- 'Ancillary Violation'
# Combine all data frames into one
Session2_combined_data <- rbind(Session2_gram_data,
Session2_violation_interest_data, Session2_ancillary_violation_data)
View(Session2_combined_data)
#clean data from NA values
Session2_combined_data <- Session2_combined_data %>%
clean_names()
#dividing the electrodes into brain regions
# Define the mapping of electrodes to regions
electrode_to_region <- c(
"T7" = "left medial",
"C3" = "left medial",
"CP5" = "left medial",
"T8" = "right medial",
"C4" = "right medial",
"CP6" = "right medial",
"Fp1" = "left anterior",
"F3" = "left anterior",
"F7" = "left anterior",
"FT9" = "left anterior",
"FC5" = "left anterior",
"Fp2" = "right anterior",
"F4" = "right anterior",
"F8" = "right anterior",
"FT10" = "right anterior",
"FC6" = "right anterior",
"P7" = "left posterior",
"P3" = "left posterior",
"O1" = "left posterior",
"P8" = "right posterior",
"P4" = "right posterior",
"O2" = "right posterior",
"Fz" = "midline anterior",
"FC1" = "midline anterior",
"FC2" = "midline anterior",
"Cz" = "midline medial",
"CP1" = "midline medial",
"CP2" = "midline medial",
"Pz" = "midline posterior",
"Oz" = "midline posterior"
)
# Ensure the 'electrode' column exists
if (!"electrode" %in% colnames(Session2_combined_data)) {
stop("The 'electrode' column is missing from the data frame.")
}
# Add a Region column based on the electrode_to_region mapping
Session2_combined_data <- Session2_combined_data %>%
mutate(Region = ifelse(electrode %in% names(electrode_to_region),
electrode_to_region[electrode],
NA_character_))
# Melt the combined data frame to convert it from wide to long format
Session2_melted_data_dirty <- melt(Session2_combined_data, id.vars =
c('Participant_number', 'electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
colnames(Session2_combined_data)
# Melt the combined data frame to convert it from wide to long format
Session2_melted_data_dirty <- melt(Session2_combined_data, id.vars =
c('Participant_number', 'electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
# Convert the 'Time' column to numeric
Session2_melted_data_dirty$Time <- as.numeric (as.character
(Session2_melted_data_dirty$Time))
Session2_melted_data_dirty <- melt(Session2_combined_data,
id.vars = c('participant_number', 'electrode', 'grammaticality', 'Region'),
variable.name = 'Time',
value.name = 'Activation')
# Convert the 'Time' column to numeric
Session2_melted_data_dirty$Time <- as.numeric (as.character
(Session2_melted_data_dirty$Time))
# Add a Session column
Session2_melted_data_dirty$Session <- 'Session 2'
# View the resulting melted data
View(Session2_melted_data_dirty)
# importing lhq3 script, which will be used to complete the session data frames
source("EEG/analysis/1. LHQ3 Importation script.R")
library(tidyverse)
library(janitor)
library(plyr)
library(reshape2)
#session2, remove participants 2 and 7 from anovas
Session2path <- "EEG/data/Session 2/Export/"
#creating patterns to import the files and recognise them as distinct conditions
# the final number in the file name indicates the Grammaticality of the trial
#files that end in:
# 101: the trial was grammatical
# 102: the trial presented a violation of interest
# 103: the trial presented an ancillary violation
#Session 2 investigates Gender agreement, indicated by the marker S1
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = Session2path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = Session2path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = Session2path, full.names = TRUE)
# Constructing lists of data, one for each condition
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),
function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),
function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
# converting the lists into data frames
Session2_gram_data = ldply(Session2_gram_list, data.frame)
Session2_violation_interest_data = ldply(Session2_violation_interest_list,
data.frame)
Session2_ancillary_violation_data = ldply (Session2_ancillary_violation_list,
data.frame)
# time during the recording is organised in milliseconds, from -100 to 1098,
#and recorded with 2 ms intervals
seq = seq(-100, 1098, 2)
# the Electrode column is formulated as a vector of electrode names that
#correspond to the time interval sequence
names(Session2_gram_data) = c('Electrode', seq)
names(Session2_violation_interest_data) = c('Electrode', seq)
names(Session2_ancillary_violation_data) = c ('Electrode', seq)
# working on the participants' name column
#removing the path from the participants' file names
file_names_gram <- basename(Session2_gram_files)
files_names_violation_interest <- basename(Session2_violation_interest)
files_names_ancillary_violation <- basename(Session2_ancillary_violation)
#Extracting the participant numbers from the file name
participants_gr <- sub("_.*", "", file_names_gram)
participants_violint = sub("_.*", "", files_names_violation_interest)
participants_ancvil = sub("_.*", "", files_names_ancillary_violation)
# adding a "Participant_number" column to the data frames
Session2_gram_data$Participant_number <- rep(participants_gr, each =
nrow(Session2_gram_data) / length(participants_gr))
Session2_violation_interest_data$Participant_number <- rep(participants_violint,
each = nrow(Session2_violation_interest_data) / length(participants_violint))
Session2_ancillary_violation_data$Participant_number <- rep(participants_ancvil,
each = nrow(Session2_ancillary_violation_data) / length(participants_ancvil))
# adding a Grammaticality column to the data frames
Session2_gram_data$Grammaticality <- 'Grammatical'
Session2_violation_interest_data$Grammaticality <- 'Violation of Interest'
Session2_ancillary_violation_data$Grammaticality <- 'Ancillary Violation'
# Combine all data frames into one
Session2_combined_data <- rbind(Session2_gram_data,
Session2_violation_interest_data, Session2_ancillary_violation_data)
View(Session2_combined_data)
#dividing the electrodes into brain regions
# Define the mapping of electrodes to regions
electrode_to_region <- c(
"T7" = "left medial",
"C3" = "left medial",
"CP5" = "left medial",
"T8" = "right medial",
"C4" = "right medial",
"CP6" = "right medial",
"Fp1" = "left anterior",
"F3" = "left anterior",
"F7" = "left anterior",
"FT9" = "left anterior",
"FC5" = "left anterior",
"Fp2" = "right anterior",
"F4" = "right anterior",
"F8" = "right anterior",
"FT10" = "right anterior",
"FC6" = "right anterior",
"P7" = "left posterior",
"P3" = "left posterior",
"O1" = "left posterior",
"P8" = "right posterior",
"P4" = "right posterior",
"O2" = "right posterior",
"Fz" = "midline anterior",
"FC1" = "midline anterior",
"FC2" = "midline anterior",
"Cz" = "midline medial",
"CP1" = "midline medial",
"CP2" = "midline medial",
"Pz" = "midline posterior",
"Oz" = "midline posterior"
)
# Add a Region column based on the electrode_to_region mapping
Session2_combined_data <- Session2_combined_data %>%
mutate(Region = ifelse(electrode %in% names(electrode_to_region),
electrode_to_region[electrode],
NA_character_))
# Ensure the 'electrode' column exists
#if (!"electrode" %in% colnames(Session2_combined_data)) {
# stop("The 'electrode' column is missing from the data frame.")
#}
#clean data from NA values
Session2_combined_data <- Session2_combined_data %>%
clean_names()
# Add a Region column based on the electrode_to_region mapping
Session2_combined_data <- Session2_combined_data %>%
mutate(Region = ifelse(electrode %in% names(electrode_to_region),
electrode_to_region[electrode],
NA_character_))
# Add a Region column on the data frame based on the electrode_to_region mapping
Session2_combined_data <- Session2_combined_data %>%
mutate(Region = electrode_to_region[electrode])
# Melt the combined data frame to convert it from wide to long format
Session2_melted_data_dirty <- melt(Session2_combined_data, id.vars =
c('Participant_number', 'electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
Session2_melted_data_dirty <- melt(Session2_combined_data,
id.vars = c('participant_number', 'electrode', 'grammaticality', 'Region'),
variable.name = 'Time',
value.name = 'Activation')
# Convert the 'Time' column to numeric
Session2_melted_data_dirty$Time <- as.numeric (as.character
(Session2_melted_data_dirty$Time))
# Add a Session column
Session2_melted_data_dirty$Session <- 'Session 2'
# View the resulting melted data
View(Session2_melted_data_dirty)
