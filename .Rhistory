<<<<<<< HEAD
=======
View(S2_N200)
#Session 2, P300 (300 - 600 ms)
S2_P300 <- Session2_LHQ3[Session2_LHQ3$Time %in% seq(300, 600, 2),]
View(S2_P300)
#Session 2, P600 (400 - 900 ms)
S2_P600 <- Session2_LHQ3[Session2_LHQ3$Time %in% seq(400, 900, 2),]
View(S2_P600)
Session3path <- "EEG/data/Session 3/Export/"
Session3_GEN_gram_files <- list.files(pattern = "*S1.S101.txt",
path = Session3path, full.names = TRUE)
Session3_GEN_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = Session3path, full.names = TRUE)
Session3_GEN_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = Session3path, full.names = TRUE)
Session3_DOM_gram_files <- list.files(pattern = "*S2.S101.txt",
path = Session3path, full.names = TRUE)
Session3_DOM_violation_interest <- list.files(pattern = "*S2_S102.txt",
path = Session3path, full.names = TRUE)
Session3_DOM_ancillary_violation <- list.files(pattern = "*S2_S103.txt",
path = Session3path, full.names = TRUE)
#Gender
Session3_GEN_gram_list = lapply(1:length(Session3_GEN_gram_files),function(x) {
read.table(Session3_GEN_gram_files[x], header=FALSE) } )
Session3_GEN_violation_interest_list = lapply(1:length(Session3_GEN_violation_interest),
function(x) { read.table(Session3_GEN_violation_interest[x], header=FALSE) } )
Session3_GEN_ancillary_violation_list = lapply(1:length(Session3_GEN_ancillary_violation),
function(x) { read.table(Session3_GEN_ancillary_violation [x], header=FALSE) } )
#Differential object marking
Session3_DOM_gram_list = lapply(1:length(Session3_DOM_gram_files),function(x) {
read.table(Session3_DOM_gram_files[x], header=FALSE) } )
Session3_DOM_violation_interest_list = lapply(1:length(Session3_DOM_violation_interest),
function(x) { read.table(Session3_DOM_violation_interest[x], header=FALSE) } )
Session3_DOM_ancillary_violation_list = lapply(1:length(Session3_DOM_ancillary_violation),
function(x) { read.table(Session3_DOM_ancillary_violation [x], header=FALSE) } )
#Gender
Session3_GEN_gram_data = ldply(Session3_GEN_gram_list, data.frame)
Session3_GEN_violation_interest_data = ldply(Session3_GEN_violation_interest_list,
data.frame)
Session3_GEN_ancillary_violation_data = ldply (Session3_GEN_ancillary_violation_list,
data.frame)
Session3_DOM_gram_data = ldply(Session3_DOM_gram_list, data.frame)
Session3_DOM_violation_interest_data = ldply(Session3_DOM_violation_interest_list,
data.frame)
Session3_DOM_ancillary_violation_data = ldply (Session3_DOM_ancillary_violation_list,
data.frame)
# time during the recording is organised in milliseconds, from -100 to 1098,
#and recorded with 2 ms intervals
>>>>>>> parent of 79e857d (end of day updates)
seq = seq(-100, 1098, 2)
# the Electrode column is formulated as a vector of electrode names that
#correspond to the time interval sequence
names(Session2_gram_data) = c('Electrode', seq)
names(Session2_violation_interest_data) = c('Electrode', seq)
names(Session2_ancillary_violation_data) = c ('Electrode', seq)
# working on the participants' name column
#removing the path from the participants' file names
file_names_gram <- basename(Session2_gram_files)
files_names_violation_interest <- basename(Session2_violation_interest)
files_names_ancillary_violation <- basename(Session2_ancillary_violation)
#Extracting the participant numbers from the file name
participants_gr <- sub("_.*", "", file_names_gram)
participants_violint = sub("_.*", "", files_names_violation_interest)
participants_ancvil = sub("_.*", "", files_names_ancillary_violation)
# adding a "Participant_number" column to the data frames
Session2_gram_data$Participant_number <- rep(participants_gr, each =
nrow(Session2_gram_data) / length(participants_gr))
Session2_violation_interest_data$Participant_number <- rep(participants_violint,
each = nrow(Session2_violation_interest_data) / length(participants_violint))
Session2_ancillary_violation_data$Participant_number <- rep(participants_ancvil,
each = nrow(Session2_ancillary_violation_data) / length(participants_ancvil))
# adding a Grammaticality column to the data frames
Session2_gram_data$Grammaticality <- 'Grammatical'
Session2_violation_interest_data$Grammaticality <- 'Violation of Interest'
Session2_ancillary_violation_data$Grammaticality <- 'Ancillary Violation'
# Combine all data frames into one
Session2_combined_data <- rbind(Session2_gram_data,
Session2_violation_interest_data, Session2_ancillary_violation_data)
View(Session2_combined_data)
#dividing the electrodes into brain regions
# Define the mapping of electrodes to regions
electrode_to_region <- c(
"T7" = "left medial",
"C3" = "left medial",
"CP5" = "left medial",
"T8" = "right medial",
"C4" = "right medial",
"CP6" = "right medial",
"Fp1" = "left anterior",
"F3" = "left anterior",
"F7" = "left anterior",
"FT9" = "left anterior",
"FC5" = "left anterior",
"Fp2" = "right anterior",
"F4" = "right anterior",
"F8" = "right anterior",
"FT10" = "right anterior",
"FC6" = "right anterior",
"P7" = "left posterior",
"P3" = "left posterior",
"O1" = "left posterior",
"P8" = "right posterior",
"P4" = "right posterior",
"O2" = "right posterior",
"Fz" = "midline anterior",
"FC1" = "midline anterior",
"FC2" = "midline anterior",
"Cz" = "midline medial",
"CP1" = "midline medial",
"CP2" = "midline medial",
"Pz" = "midline posterior",
"Oz" = "midline posterior"
)
# Add a Region column based on the electrode_to_region mapping
Session2_combined_data <- Session2_combined_data %>%
mutate(Region = ifelse(electrode %in% names(electrode_to_region),
electrode_to_region[electrode],
NA_character_))
# Ensure the 'electrode' column exists
#if (!"electrode" %in% colnames(Session2_combined_data)) {
# stop("The 'electrode' column is missing from the data frame.")
#}
#clean data from NA values
Session2_combined_data <- Session2_combined_data %>%
clean_names()
# Add a Region column based on the electrode_to_region mapping
Session2_combined_data <- Session2_combined_data %>%
mutate(Region = ifelse(electrode %in% names(electrode_to_region),
electrode_to_region[electrode],
NA_character_))
# Add a Region column on the data frame based on the electrode_to_region mapping
Session2_combined_data <- Session2_combined_data %>%
mutate(Region = electrode_to_region[electrode])
# Melt the combined data frame to convert it from wide to long format
Session2_melted_data_dirty <- melt(Session2_combined_data, id.vars =
c('Participant_number', 'electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
Session2_melted_data_dirty <- melt(Session2_combined_data,
id.vars = c('participant_number', 'electrode', 'grammaticality', 'Region'),
variable.name = 'Time',
value.name = 'Activation')
# Convert the 'Time' column to numeric
Session2_melted_data_dirty$Time <- as.numeric (as.character
(Session2_melted_data_dirty$Time))
# Add a Session column
Session2_melted_data_dirty$Session <- 'Session 2'
# View the resulting melted data
View(Session2_melted_data_dirty)
=======
Session3_melted_data_dirty_S1 <- melt(Session3_combined_data_S1, id.vars =
c('Participant_number', 'Electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
# Convert the 'Time' column to numeric
Session3_melted_data_dirty_S1$Time <- as.numeric (as.character
(Session2_melted_data_dirty$Time))
# Melt the combined data frame to convert it from wide to long format
Session3_melted_data_dirty_S1 <- melt(Session3_combined_data_S1, id.vars =
c('Participant_number', 'Electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
# Convert the 'Time' column to numeric
Session3_melted_data_dirty_S1$Time <- as.numeric (as.character
(Session2_melted_data_dirty$Time))
# Convert the 'Time' column to numeric
Session3_melted_data_dirty_S1$Time <- as.numeric (as.character
(Session3_melted_data_dirty_S1$Time))
# Add a Session column
Session3_melted_data_dirty_S1$Session <- 'Session 3'
# View the resulting melted data
=======
Session3_melted_data_dirty_S1 <- melt(Session3_combined_data_S1, id.vars =
c('Participant_number', 'Electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
# Convert the 'Time' column to numeric
Session3_melted_data_dirty_S1$Time <- as.numeric (as.character
(Session2_melted_data_dirty$Time))
# Melt the combined data frame to convert it from wide to long format
Session3_melted_data_dirty_S1 <- melt(Session3_combined_data_S1, id.vars =
c('Participant_number', 'Electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
# Convert the 'Time' column to numeric
Session3_melted_data_dirty_S1$Time <- as.numeric (as.character
(Session2_melted_data_dirty$Time))
# Convert the 'Time' column to numeric
Session3_melted_data_dirty_S1$Time <- as.numeric (as.character
(Session3_melted_data_dirty_S1$Time))
# Add a Session column
Session3_melted_data_dirty_S1$Session <- 'Session 3'
# View the resulting melted data
>>>>>>> parent of cc21368 (updates)
View(Session3_melted_data_dirty_S1)
# Removing rows where any column has NA or NaN values
Session3_melted_data_S1 <- Session3_melted_data_dirty_S1 %>%
filter(complete.cases(.))
# View the cleaned data
View(Session3_melted_data_S1)
# making sure that no Nas or NaNs have been introduced by coercion
rows_with_any_na_nan <- Session3_melted_data_S1 %>%
filter(if_any(everything(), ~ is.na(.) | is.nan(.)))
print(rows_with_any_na_nan)
#setting the columns Time, Region, Grammaticality and Participant_number as factors
#in order to run ANOVAs
#Session2_melted_data$Time <- as.factor(Session3_melted_data_S1$Time)
Session3_melted_data_S1$Region <- as.factor(Session3_melted_data_S1$Region)
Session3_melted_data_S1$Grammaticality <- as.factor(Session3_melted_data_S1$Grammaticality)
Session3_melted_data_S1$Participant_number <- as.factor(Session3_melted_data_S1$Participant_number)
#adding the LHQ3 data to the Session2_melted_data
#Performing the inner join function,due to the discrepancy between the number of
#rows between the two data frames, so that no data is deleted
<<<<<<< HEAD
Session3_LHQ3 <- full_join(LHQ3_final, Session3_melted_data_S1, by = "Participant_number")
# Print combined data frame
View(Session3_LHQ3)
<<<<<<< HEAD
>>>>>>> parent of cc21368 (updates)
=======
>>>>>>> parent of cc21368 (updates)
# importing lhq3 script, which will be used to complete the session data frames
source("EEG/analysis/1. LHQ3 Importation script.R")
library(tidyverse)
library(janitor)
library(plyr)
library(reshape2)
#session2, remove participants 2 and 7 from anovas
Session2path <- "EEG/data/Session 2/Export/"
#creating patterns to import the files and recognise them as distinct conditions
# the final number in the file name indicates the Grammaticality of the trial
#files that end in:
# 101: the trial was grammatical
# 102: the trial presented a violation of interest
# 103: the trial presented an ancillary violation
#Session 2 investigates Gender agreement, indicated by the marker S1
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = Session2path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = Session2path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = Session2path, full.names = TRUE)
# Constructing lists of data, one for each condition
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),
function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),
function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
# converting the lists into data frames
Session2_gram_data = ldply(Session2_gram_list, data.frame)
Session2_violation_interest_data = ldply(Session2_violation_interest_list,
data.frame)
Session2_ancillary_violation_data = ldply (Session2_ancillary_violation_list,
data.frame)
# time during the recording is organised in milliseconds, from -100 to 1098,
#and recorded with 2 ms intervals
seq = seq(-100, 1098, 2)
# the Electrode column is formulated as a vector of electrode names that
#correspond to the time interval sequence
names(Session2_gram_data) = c('Electrode', seq)
names(Session2_violation_interest_data) = c('Electrode', seq)
names(Session2_ancillary_violation_data) = c ('Electrode', seq)
# working on the participants' name column
#removing the path from the participants' file names
file_names_gram <- basename(Session2_gram_files)
files_names_violation_interest <- basename(Session2_violation_interest)
files_names_ancillary_violation <- basename(Session2_ancillary_violation)
#Extracting the participant numbers from the file name
participants_gr <- sub("_.*", "", file_names_gram)
participants_violint = sub("_.*", "", files_names_violation_interest)
participants_ancvil = sub("_.*", "", files_names_ancillary_violation)
# adding a "Participant_number" column to the data frames
Session2_gram_data$Participant_number <- rep(participants_gr, each =
nrow(Session2_gram_data) / length(participants_gr))
Session2_violation_interest_data$Participant_number <- rep(participants_violint,
each = nrow(Session2_violation_interest_data) / length(participants_violint))
Session2_ancillary_violation_data$Participant_number <- rep(participants_ancvil,
each = nrow(Session2_ancillary_violation_data) / length(participants_ancvil))
# adding a Grammaticality column to the data frames
Session2_gram_data$Grammaticality <- 'Grammatical'
Session2_violation_interest_data$Grammaticality <- 'Violation of Interest'
Session2_ancillary_violation_data$Grammaticality <- 'Ancillary Violation'
# Combine all data frames into one
Session2_combined_data <- rbind(Session2_gram_data,
Session2_violation_interest_data, Session2_ancillary_violation_data)
View(Session2_combined_data)
#dividing the electrodes into brain regions
# Define the mapping of electrodes to regions
electrode_to_region <- c(
"T7" = "left medial",
"C3" = "left medial",
"CP5" = "left medial",
"T8" = "right medial",
"C4" = "right medial",
"CP6" = "right medial",
"Fp1" = "left anterior",
"F3" = "left anterior",
"F7" = "left anterior",
"FT9" = "left anterior",
"FC5" = "left anterior",
"Fp2" = "right anterior",
"F4" = "right anterior",
"F8" = "right anterior",
"FT10" = "right anterior",
"FC6" = "right anterior",
"P7" = "left posterior",
"P3" = "left posterior",
"O1" = "left posterior",
"P8" = "right posterior",
"P4" = "right posterior",
"O2" = "right posterior",
"Fz" = "midline anterior",
"FC1" = "midline anterior",
"FC2" = "midline anterior",
"Cz" = "midline medial",
"CP1" = "midline medial",
"CP2" = "midline medial",
"Pz" = "midline posterior",
"Oz" = "midline posterior"
)
# Ensure the 'electrode' column exists
#if (!"electrode" %in% colnames(Session2_combined_data)) {
# stop("The 'electrode' column is missing from the data frame.")
#}
#clean data from NA values
Session2_combined_data <- Session2_combined_data %>%
clean_names()
# Add a Region column based on the electrode_to_region mapping
Session2_combined_data <- Session2_combined_data %>%
mutate(Region = ifelse(electrode %in% names(electrode_to_region),
electrode_to_region[electrode],
NA_character_))
# Add a Region column on the data frame based on the electrode_to_region mapping
Session2_combined_data <- Session2_combined_data %>%
mutate(Region = electrode_to_region[electrode])
# Melt the combined data frame to convert it from wide to long format
Session2_melted_data_dirty <- melt(Session2_combined_data, id.vars =
c('Participant_number', 'electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
# Convert the 'Time' column to numeric
Session2_melted_data_dirty$Time <- as.numeric (as.character
(Session2_melted_data_dirty$Time))
# Add a Session column
Session2_melted_data_dirty$Session <- 'Session 2'
# View the resulting melted data
View(Session2_melted_data_dirty)
<<<<<<< HEAD
=======
# Removing rows where any column has NA or NaN values
Session2_melted_data <- Session2_melted_data_dirty %>%
filter(complete.cases(.))
# View the cleaned data
View(Session2_melted_data)
# making sure that no Nas or NaNs have been introduced by coercion
rows_with_any_na_nan <- Session2_melted_data %>%
filter(if_any(everything(), ~ is.na(.) | is.nan(.)))
print(rows_with_any_na_nan)
#setting the columns Time, Region, Grammaticality and Participant_number as factors
#in order to run ANOVAs
#Session2_melted_data$Time <- as.factor(Session2_melted_data$Time)
Session2_melted_data$Region <- as.factor(Session2_melted_data$Region)
Session2_melted_data$Grammaticality <- as.factor(Session2_melted_data$Grammaticality)
Session2_melted_data$Participant_number <- as.factor(Session2_melted_data$Participant_number)
#adding the LHQ3 data to the Session2_melted_data
# Perform inner join
combined_df <- full_join(LHQ3_final, Session2_melted_data, by = "Participant_number")
# Print combined data frame
print(combined_df)
# Print combined data frame
View(combined_df)
#adding the LHQ3 data to the Session2_melted_data
#Performing the inner join function,due to the discrepancy between the number of
#rows between the two data frames, so that no data is deleted
Session2_LHQ3 <- full_join(LHQ3_final, Session2_melted_data, by = "Participant_number")
# Print combined data frame
View(Session2_LHQ3)
# Session 2, N200 time window (200-500 ms)
S2_N200 <- Session2_LHQ3 [Session2_LHQ3$Time %in% seq(200, 500, 2),]
View(S2_N200)
S2_P300 <- Session2_LHQ3[Session2_LHQ3$Time %in% seq(300, 600, 2),]
# Check the subsetted data
print(S2_P300)
head(S2_P300)
str(S2_P300)
View(S2_P300)
#Session 2, P600 (400 - 900 ms)
S2_P600 <- Session2_LHQ3[Session2_LHQ3$Time %in% seq(400, 900, 2),]
View(S2_P600)
>>>>>>> parent of cc21368 (updates)
Session3path <- "EEG/data/Session 3/Export/"
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = Session3path, full.names = TRUE)
Session3_gram_files <- list.files(pattern = "*S1.S101.txt",
path = Session3path, full.names = TRUE)
Session3_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = Session3path, full.names = TRUE)
Session3_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = Session3path, full.names = TRUE)
Session3path <- "EEG/data/Session 3/Export/"
Session3_S1_gram_files <- list.files(pattern = "*S1.S101.txt",
path = Session3path, full.names = TRUE)
Session3_S1_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = Session3path, full.names = TRUE)
<<<<<<< HEAD
#Gender
Session3_GEN_gram_list = lapply(1:length(Session3_GEN_gram_files),function(x) {
read.table(Session3_GEN_gram_files[x], header=FALSE) } )
View(Session3_GEN_gram_list)
Session3_GEN_violation_interest_list = lapply(1:length(Session3_GEN_violation_interest),
function(x) { read.table(Session3_GEN_violation_interest[x], header=FALSE) } )
View(Session3_GEN_violation_interest_list)
Session3_GEN_ancillary_violation_list = lapply(1:length(Session3_GEN_ancillary_violation),
function(x) { read.table(Session3_GEN_ancillary_violation [x], header=FALSE) } )
View(Session3_GEN_ancillary_violation_list)
#Differential object marking
Session3_DOM_gram_list = lapply(1:length(Session3_DOM_gram_files),function(x) {
read.table(Session3_DOM_gram_files[x], header=FALSE) } )
View(Session3_DOM_gram_list)
Session3_DOM_violation_interest_list = lapply(1:length(Session3_DOM_violation_interest),
function(x) { read.table(Session3_S1_violation_interest[x], header=FALSE) } )
Session3_DOM_ancillary_violation_list = lapply(1:length(Session3_DOM_ancillary_violation),
function(x) { read.table(Session3_DOM_ancillary_violation [x], header=FALSE) } )
Session3_DOM_violation_interest_list = lapply(1:length(Session3_DOM_violation_interest),
function(x) { read.table(Session3_DOM_violation_interest[x], header=FALSE) } )
View(Session3_DOM_violation_interest_list)
Session3_DOM_ancillary_violation_list = lapply(1:length(Session3_DOM_ancillary_violation),
function(x) { read.table(Session3_DOM_ancillary_violation [x], header=FALSE) } )
View(Session3_DOM_ancillary_violation_list)
# converting the lists into data frames
#Gender
Session3_GEN_gram_data = ldply(Session3_GEN_gram_list, data.frame)
Session3_GEN_violation_interest_data = ldply(Session3_GEN_violation_interest_list,
=======
Session3_S1_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = Session3path, full.names = TRUE)
# Constructing lists of data, one for each condition
Session3_S1_gram_list = lapply(1:length(Session3_S1_gram_files),function(x) {
read.table(Session3_S1_gram_files[x], header=FALSE) } )
Session3_S1_violation_interest_list = lapply(1:length(Session3_S1_violation_interest),
function(x) {
read.table(Session3_S1_violation_interest[x], header=FALSE) } )
Session3_S1_ancillary_violation_list = lapply(1:length(Session3_S1_ancillary_violation),
function(x) {
read.table(Session3_S1_ancillary_violation [x], header=FALSE) } )
# converting the lists into data frames
Session3_S1_gram_data = ldply(Session3_S1_gram_list, data.frame)
Session3_S1_violation_interest_data = ldply(Session3_S1_violation_interest_list,
>>>>>>> parent of cc21368 (updates)
=======
Session3_LHQ3 <- full_join(LHQ3_final, Session3_melted_data, by = "Participant_number")
# Print combined data frame
View(Session3_LHQ3)
Session4path <- "EEG/data/Session 4/Export/"
Session4_GEN_gram_files <- list.files(pattern = "*S1_S101.txt",
path = Session4path, full.names = TRUE)
Session4_GEN_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = Session4path, full.names = TRUE)
Session4_GEN_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = Session4path, full.names = TRUE)
Session4_DOM_gram_files <- list.files(pattern = "*S2_S101.txt",
path = Session4path, full.names = TRUE)
Session4_DOM_violation_interest <- list.files(pattern = "*S2_S102.txt",
path = Session4path, full.names = TRUE)
Session4_DOM_ancillary_violation <- list.files(pattern = "*S2_S103.txt",
path = Session4path, full.names = TRUE)
Session4_VOA_gram_files <- list.files(pattern = "*S3_S101.txt",
path = Session4path, full.names = TRUE)
Session4_VOA_violation_interest <- list.files(pattern = "*S3_S102.txt",
path = Session4path, full.names = TRUE)
Session4_VOA_ancillary_violation <- list.files(pattern = "*S3_S103.txt",
path = Session4path, full.names = TRUE)
Session4_GEN_gram_list = lapply(1:length(Session4_GEN_gram_files),function(x) {
read.table(Session4_GEN_gram_files[x], header=FALSE) } )
Session4_GEN_violation_interest_list = lapply(1:length(Session4_GEN_violation_interest),
function(x) { read.table(Session4_GEN_violation_interest[x], header=FALSE) } )
Session4_GEN_ancillary_violation_list = lapply(1:length(Session4_GEN_ancillary_violation),
function(x) { read.table(Session4_GEN_ancillary_violation [x], header=FALSE) } )
View(Session3_GEN_ancillary_violation_list)
Session4_DOM_gram_list = lapply(1:length(Session4_DOM_gram_files),function(x) {
read.table(Session4_DOM_gram_files[x], header=FALSE) } )
Session4_DOM_violation_interest_list = lapply(1:length(Session4_DOM_violation_interest),
function(x) { read.table(Session4_DOM_violation_interest[x], header=FALSE) } )
Session4_DOM_ancillary_violation_list = lapply(1:length(Session4_DOM_ancillary_violation),
function(x) { read.table(Session4_DOM_ancillary_violation [x], header=FALSE) } )
Session4_VOA_gram_list = lapply(1:length(Session4_VOA_gram_files),function(x) {
read.table(Session4_VOA_gram_files[x], header=FALSE) } )
Session4_VOA_violation_interest_list = lapply(1:length(Session4_VOA_violation_interest),
function(x) { read.table(Session4_VOA_violation_interest[x], header=FALSE) } )
Session4_VOA_ancillary_violation_list = lapply(1:length(Session4_VOA_ancillary_violation),
function(x) { read.table(Session4_VOA_ancillary_violation [x], header=FALSE) } )
Session4_GEN_gram_data = ldply(Session4_GEN_gram_list, data.frame)
Session4_GEN_violation_interest_data = ldply(Session4_GEN_violation_interest_list,
>>>>>>> parent of 79e857d (end of day updates)
data.frame)
Session3_S1_ancillary_violation_data = ldply (Session3_S1_ancillary_violation_list,
data.frame)
# time during the recording is organised in milliseconds, from -100 to 1098,
#and recorded with 2 ms intervals
seq = seq(-100, 1098, 2)
# the electrode column is formulated as a vector of electrode names that
#correspond to the time interval sequence
names(Session3_S1_gram_data) = c('Electrode', seq)
<<<<<<< HEAD
=======
names(Session3_S1_violation_interest_data) = c('Electrode', seq)
names(Session3_S1_ancillary_violation_data) = c ('Electrode', seq)
# working on the participants' name column
#removing the path from the participants' file names
file_names_gram3_S1 <- basename(Session3_S1_gram_files)
files_names_violation_interest3_S1 <- basename(Session3_S1_violation_interest)
files_names_ancillary_violation3_S1 <- basename(Session3_S1_ancillary_violation)
#Extracting the participant numbers from the file name
participants_gr3_S1 <- sub("_.*", "", file_names_gram3_S1)
participants_violint3_S1 = sub("_.*", "", files_names_violation_interest3_S1)
participants_ancvil3_S1 = sub("_.*", "", files_names_ancillary_violation3_S1)
# adding a "Participant_number" column to the data frames
Session3_S1_gram_data$Participant_number <- rep(participants_gr3_S1, each =
nrow(Session3_S1_gram_data) / length(participants_gr3_S1))
Session3_S1_violation_interest_data$Participant_number <- rep(participants_violint3_S1,
each = nrow(Session3_S1_violation_interest_data) / length(participants_violint3_S1))
Session3_S1_ancillary_violation_data$Participant_number <- rep(participants_ancvil3_S1,
each = nrow(Session3_S1_ancillary_violation_data) / length(participants_ancvil3_S1))
# adding a Grammaticality column to the data frames
Session3_S1_gram_data$Grammaticality <- 'Grammatical'
Session3_S1_violation_interest_data$Grammaticality <- 'Violation of Interest'
Session3_S1_ancillary_violation_data$Grammaticality <- 'Ancillary Violation'
# Combine all data frames into one
Session3_combined_data_S1 <- rbind(Session3_S1_gram_data,
Session3_S1_violation_interest_data, Session3_S1_ancillary_violation_data)
#dividing the electrodes into brain regions
# Define the mapping of electrodes to regions
electrode_to_region <- c(
"T7" = "left medial",
"C3" = "left medial",
"CP5" = "left medial",
"T8" = "right medial",
"C4" = "right medial",
"CP6" = "right medial",
"Fp1" = "left anterior",
"F3" = "left anterior",
"F7" = "left anterior",
"FT9" = "left anterior",
"FC5" = "left anterior",
"Fp2" = "right anterior",
"F4" = "right anterior",
"F8" = "right anterior",
"FT10" = "right anterior",
"FC6" = "right anterior",
"P7" = "left posterior",
"P3" = "left posterior",
"O1" = "left posterior",
"P8" = "right posterior",
"P4" = "right posterior",
"O2" = "right posterior",
"Fz" = "midline anterior",
"FC1" = "midline anterior",
"FC2" = "midline anterior",
"Cz" = "midline medial",
"CP1" = "midline medial",
"CP2" = "midline medial",
"Pz" = "midline posterior",
"Oz" = "midline posterior"
)
# Add a Region column on the data frame based on the electrode_to_region mapping
Session3_combined_data_S1 <- Session3_combined_data_S1 %>%
mutate(Region = electrode_to_region[Electrode])
# Melt the combined data frame to convert it from wide to long format
Session3_melted_data_dirty_S1 <- melt(Session3_combined_data_S1, id.vars =
c('Participant_number', 'Electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
# Convert the 'Time' column to numeric
Session3_melted_data_dirty_S1$Time <- as.numeric (as.character
(Session2_melted_data_dirty$Time))
# Melt the combined data frame to convert it from wide to long format
Session3_melted_data_dirty_S1 <- melt(Session3_combined_data_S1, id.vars =
c('Participant_number', 'Electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
# Convert the 'Time' column to numeric
Session3_melted_data_dirty_S1$Time <- as.numeric (as.character
(Session2_melted_data_dirty$Time))
# Convert the 'Time' column to numeric
Session3_melted_data_dirty_S1$Time <- as.numeric (as.character
(Session3_melted_data_dirty_S1$Time))
# Add a Session column
Session3_melted_data_dirty_S1$Session <- 'Session 3'
# View the resulting melted data
View(Session3_melted_data_dirty_S1)
# Removing rows where any column has NA or NaN values
Session3_melted_data_S1 <- Session3_melted_data_dirty_S1 %>%
filter(complete.cases(.))
# View the cleaned data
View(Session3_melted_data_S1)
# making sure that no Nas or NaNs have been introduced by coercion
rows_with_any_na_nan <- Session3_melted_data_S1 %>%
filter(if_any(everything(), ~ is.na(.) | is.nan(.)))
print(rows_with_any_na_nan)
<<<<<<< HEAD
#setting the columns Time, Region, Grammaticality and Participant_number as factors
#in order to run ANOVAs
#Session2_melted_data$Time <- as.factor(Session3_melted_data_S1$Time)
Session3_melted_data_S1$Region <- as.factor(Session3_melted_data_S1$Region)
Session3_melted_data_S1$Grammaticality <- as.factor(Session3_melted_data_S1$Grammaticality)
Session3_melted_data_S1$Participant_number <- as.factor(Session3_melted_data_S1$Participant_number)
#adding the LHQ3 data to the Session2_melted_data
#Performing the inner join function,due to the discrepancy between the number of
#rows between the two data frames, so that no data is deleted
Session3_LHQ3 <- full_join(LHQ3_final, Session3_melted_data_S1, by = "Participant_number")
# Print combined data frame
View(Session3_LHQ3)
>>>>>>> parent of cc21368 (updates)
=======
#adding the LHQ3 data to the Session2_melted_data
#Performing the inner join function,due to the discrepancy between the number of
#rows between the two data frames, so that no data is deleted
Session4_LHQ3 <- full_join(LHQ3_final, Session4_melted_data, by = "Participant_number")
library(here)
library(tidyverse)
library(janitor)
library(plyr)
library(reshape2)
library(magrittr)
library(dplyr)
library(ggplot2)
Session2path <- "EEG/data/Session 2/Export/"
#creating patterns to import the files and recognise them as distinct conditions
# the final number in the file name indicates the Grammaticality of the trial
#files that end in:
# 101: the trial was grammatical
# 102: the trial presented a violation of interest
# 103: the trial presented an ancillary violation
#Session 2 investigates Gender agreement, indicated by the marker S1
Session2_gram_files <- list.files(pattern = "*S1.S101.txt",
path = Session2path, full.names = TRUE)
Session2_violation_interest <- list.files(pattern = "*S1_S102.txt",
path = Session2path, full.names = TRUE)
Session2_ancillary_violation <- list.files(pattern = "*S1_S103.txt",
path = Session2path, full.names = TRUE)
# Constructing lists of data, one for each condition
Session2_gram_list = lapply(1:length(Session2_gram_files),function(x) {
read.table(Session2_gram_files[x], header=FALSE) } )
Session2_violation_interest_list = lapply(1:length(Session2_violation_interest),
function(x) {
read.table(Session2_violation_interest[x], header=FALSE) } )
Session2_ancillary_violation_list = lapply(1:length(Session2_ancillary_violation),
function(x) {
read.table(Session2_ancillary_violation [x], header=FALSE) } )
# converting the lists into data frames
Session2_gram_data = ldply(Session2_gram_list, data.frame)
Session2_violation_interest_data = ldply(Session2_violation_interest_list,
data.frame)
Session2_ancillary_violation_data = ldply (Session2_ancillary_violation_list,
data.frame)
# time during the recording is organised in milliseconds, from -100 to 1098,
#and recorded with 2 ms intervals
seq = seq(-100, 1098, 2)
# the electrode column is formulated as a vector of electrode names that
#correspond to the time interval sequence
names(Session2_gram_data) = c('Electrode', seq)
names(Session2_violation_interest_data) = c('Electrode', seq)
names(Session2_ancillary_violation_data) = c ('Electrode', seq)
# working on the participants' name column
#removing the path from the participants' file names
file_names_gram <- basename(Session2_gram_files)
files_names_violation_interest <- basename(Session2_violation_interest)
files_names_ancillary_violation <- basename(Session2_ancillary_violation)
#Extracting the participant numbers from the file name
participants_gr <- sub("_.*", "", file_names_gram)
participants_violint = sub("_.*", "", files_names_violation_interest)
participants_ancvil = sub("_.*", "", files_names_ancillary_violation)
# adding a "Participant_number" column to the data frames
Session2_gram_data$Participant_number <- rep(participants_gr, each =
nrow(Session2_gram_data) / length(participants_gr))
Session2_violation_interest_data$Participant_number <- rep(participants_violint,
each = nrow(Session2_violation_interest_data) / length(participants_violint))
Session2_ancillary_violation_data$Participant_number <- rep(participants_ancvil,
each = nrow(Session2_ancillary_violation_data) / length(participants_ancvil))
# adding a Grammaticality column to the data frames
Session2_gram_data$Grammaticality <- 'Grammatical'
Session2_violation_interest_data$Grammaticality <- 'Violation of Interest'
Session2_ancillary_violation_data$Grammaticality <- 'Ancillary Violation'
# Combine all data frames into one
Session2_combined_data <- rbind(Session2_gram_data,
Session2_violation_interest_data, Session2_ancillary_violation_data)
View(Session2_combined_data)
#dividing the electrodes into brain regions
# Define the mapping of electrodes to regions
electrode_to_region <- c(
"T7" = "left medial",
"C3" = "left medial",
"CP5" = "left medial",
"T8" = "right medial",
"C4" = "right medial",
"CP6" = "right medial",
"Fp1" = "left anterior",
"F3" = "left anterior",
"F7" = "left anterior",
"FT9" = "left anterior",
"FC5" = "left anterior",
"Fp2" = "right anterior",
"F4" = "right anterior",
"F8" = "right anterior",
"FT10" = "right anterior",
"FC6" = "right anterior",
"P7" = "left posterior",
"P3" = "left posterior",
"O1" = "left posterior",
"P8" = "right posterior",
"P4" = "right posterior",
"O2" = "right posterior",
"Fz" = "midline anterior",
"FC1" = "midline anterior",
"FC2" = "midline anterior",
"Cz" = "midline medial",
"CP1" = "midline medial",
"CP2" = "midline medial",
"Pz" = "midline posterior",
"Oz" = "midline posterior"
)
# Add a Region column on the data frame based on the electrode_to_region mapping
Session2_combined_data <- Session2_combined_data %>%
mutate(Region = electrode_to_region[Electrode])
# Melt the combined data frame to convert it from wide to long format
Session2_melted_data_dirty <- melt(Session2_combined_data, id.vars =
c('Participant_number', 'Electrode', 'Grammaticality', 'Region'),
variable.name = 'Time', value.name = 'Activation')
# Convert the 'Time' column to numeric
Session2_melted_data_dirty$Time <- as.numeric (as.character
(Session2_melted_data_dirty$Time))
# Add a Session column
Session2_melted_data_dirty$Session <- 'Session 2'
# View the resulting melted data
View(Session2_melted_data_dirty)
# Removing rows where any column has NA or NaN values
Session2_melted_data <- Session2_melted_data_dirty %>%
filter(complete.cases(.))
# View the cleaned data
View(Session2_melted_data)
# making sure that no Nas or NaNs have been introduced by coercion
rows_with_any_na_nan <- Session2_melted_data %>%
filter(if_any(everything(), ~ is.na(.) | is.nan(.)))
print(rows_with_any_na_nan)
#adding the LHQ3 data to the Session2_melted_data
#Performing the inner join function,due to the discrepancy between the number of
#rows between the two data frames, so that no data is deleted
Session2_LHQ3 <- full_join(LHQ3_final, Session2_melted_data, by = "Participant_number")
#setting the columns Time, Region, Grammaticality and Participant_number as factors
#in order to run ANOVAs
#Session2_melted_data$Time <- as.factor(Session2_melted_data$Time)
Session2_melted_data$Region <- as.factor(Session2_melted_data$Region)
Session2_melted_data$Grammaticality <- as.factor(Session2_melted_data$Grammaticality)
Session2_melted_data$Participant_number <- as.factor(Session2_melted_data$Participant_number)
# Print combined data frame
View(Session2_LHQ3)
# Session 2, N200 time window (200-500 ms)
S2_N200 <- Session2_LHQ3 [Session2_LHQ3$Time %in% seq(200, 500, 2),]
>>>>>>> parent of 79e857d (end of day updates)
